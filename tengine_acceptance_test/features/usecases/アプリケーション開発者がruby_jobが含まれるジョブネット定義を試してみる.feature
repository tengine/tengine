#language:ja
機能: アプリケーション開発者がruby_jobが含まれるジョブネット定義を試してみる

  背景:
    前提 "DBプロセス"が起動している
    かつ "キュープロセス"が起動している
    かつ "Tengineコンソールプロセス"が起動している
    かつ テンプレートジョブが1件も登録されていない
    かつ 実行ジョブが1件もない
    かつ イベントが1件もない
# jobとruby_jobの混在パターンをやる必要があれば必要となる
#    かつ 仮想サーバがインスタンス識別子:"test_server1"で登録されていること
#    かつ 認証情報が名称:"test_credential1"で登録されている
    かつ イベントキューにメッセージが1件もない

  # ./usecases/job/dsl/01_07_01__01_one_ruby_job_in_jobnet.rb
  # ---------------------------
  # -*- coding: utf-8 -*-
  # require 'tengine_job'
  #
  # jobnet("rjn0101") do
  #   boot_jobs('j1')
  #   ruby_job('j1'){ STDOUT.puts('j1 executing...') }
  # end
  # ---------------------------
  #
  @01_07_01
  シナリオ: 1つのruby_jobが含まれるルートジョブネット

    もし "Tengineコアプロセス"の起動を行うために"tengined -T ./usecases/job/dsl/01_07_01_01_one_ruby_job_in_jobnet.rb -f ./features/config/tengined_debug.yml.erb "というコマンドを実行する
    もし "Tengineコアプロセス"の標準出力からPIDを確認する
    もし "Tengineコアプロセス"の状態が"稼働中"であることを確認する

    もし ジョブネット"rjn0101"を実行する
    かつ ジョブネット"rjn0101"が完了することを確認する

    ならば ジョブネット"/rjn0101" のステータスが正常終了であること
    かつ ジョブ"/rjn0101/j1" のステータスが正常終了であること
    かつ "Tengineコアプロセス"の標準出力に'j1 executing...'と出力されていることを確認する

  @01_07_XX
  シナリオ: 複数のruby_job(直列)が含まれるルートジョブネット # 失敗のパターンも必要
  # auto_sequenceを使う

  @01_07_XX
  シナリオ: 複数のruby_job(並列)が含まれるルートジョブネット # ruby_jobとjobの混在、失敗のパターンも必要

  @01_07_XX
  シナリオ: ジョブネット内の最初に実行するジョブが並列のルートジョブネット # ruby_jobとjobの混在、失敗のパターンも必要

  @01_07_XX
  シナリオ: ジョブネット内の最後に実行するジョブが並列のルートジョブネット # ruby_jobとjobの混在、失敗のパターンも必要

  @01_07_XX
  シナリオ: finallyが含まれるルートジョブネット # ruby_jobとjobの混在、失敗のパターンも必要

  @01_07_XX
  シナリオ: 二階層のルートジョブネット # これの直列、並列、ruby_jobとjobの混在、失敗のパターンも必要
  # ルートジョブネット->ジョブネット

  @01_07_XX
  シナリオ: 三階層のルートジョブネット # これの直列、並列、ruby_jobとjobの混在、失敗のパターンも必要
  # ルートジョブネット->ジョブネット->ジョブネット

  @01_07_XX
  シナリオ: finally内にジョブネットを含むルートジョブネット # これの直列、並列、ruby_jobとjobの混在、失敗のパターンも必要
  # ルートジョブネット->finallyジョブネット->ジョブネット

  @01_07_XX
  シナリオ: finally内に二階層のジョブネットを含むルートジョブネット # これの直列、並列、ruby_jobとjobの混在、失敗のパターンも必要
  # ルートジョブネット->finallyジョブネット->ジョブネット->ジョブネット

  @01_07_XX
  シナリオ: finallyが入れ子になったルートジョブネット # 失敗のパターンも必要
  # ルートジョブネット->finallyジョブネット->finallyジョブネット

  @01_07_XX
  シナリオ: expansionが含まれるルートジョブネット

  @01_07_XX
  シナリオ: 二重にexpandされたルートジョブネット

  @01_07_XX
  シナリオ: ruby_jobが循環参照しているルートジョブネット

  @01_07_XX
  シナリオ: custom_conductorを定義したルートジョブネット

  @01_07_XX
  シナリオ: ruby_job内で明示的にjob_succeedを指定したルートジョブネット # メッセージの指定

  @01_07_XX
  シナリオ: ruby_job内で明示的にjob_failを指定したルートジョブネット # メッセージの指定、例外クラスの指定




### TODO：アプリケーション開発者が様々な書き方でジョブネット定義をしてみる.featureに倣って、シナリオを追加する
# https://github.com/tengine/tengine/blob/develop/tengine_acceptance_test/features/usecases/%E3%82%A2%E3%83%95%E3%82%9A%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E8%80%85%E3%81%8B%E3%82%99%E6%A7%98%E3%80%85%E3%81%AA%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%A6%E3%82%99%E3%82%B7%E3%82%99%E3%83%A7%E3%83%95%E3%82%99%E3%83%8D%E3%83%83%E3%83%88%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B.feature

シナリオ: finallyがジョブネットの途中に定義されたルートジョブネット
シナリオ: boot_jobsがジョブネットの途中に定義されたルートジョブネット
シナリオ: auto_sequenceがジョブネットの途中に定義されたルートジョブネット
シナリオ: finallyが2回定義されたルートジョブネット
シナリオ: auto_sequenceが2回定義されたルートジョブネット
シナリオ: auto_sequenceのあとにboot_jobsが定義されたルートジョブネット
シナリオ: ruby_jobのオプションに不正な値が定義されたルートジョブネット #
シナリオ: どこからも参照されないruby_jobが定義されたルートジョブネット
シナリオ: boot_jobsにジョブネットの先頭以外のジョブが定義されたルートジョブネット


