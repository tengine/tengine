# -*- coding: utf-8 -*-

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Resource::CredentialsController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Resource::Credential. As you add validations to Tengine::Resource::Credential, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "ssh-private_key",
      :auth_type_key => :ssh_password,
      :auth_values => {
        :username => 'user1',
        :password => "password1",
      }
    }
  end

  before do
    Tengine::Resource::Credential.delete_all
  end

  describe "GET index" do
    it "assigns all tengine_resource_credentials as @tengine_resource_credentials" do
      credential = Tengine::Resource::Credential.create! valid_attributes
      get :index
      credentials = assigns(:credentials)
      credentials.to_a.should eq([credential])
    end
   
    describe "?sort" do
      before do
        Tengine::Resource::Credential.delete_all
        @c1= Tengine::Resource::Credential.create!(
          :name => "ssh_password1",
          :description => "Description6",
          :auth_type_cd => "01",
          :auth_values => {"username"=>"1", "password"=>"2"},
        )
        @c2= Tengine::Resource::Credential.create!(
          :name => "ssh_public_key1",
          :description => "Description5",
          :auth_type_cd => "02",
          :auth_values => {"username"=>"1", "private_keys"=>"2", "passphrase" => 3},
        )
        @c3= Tengine::Resource::Credential.create!(
          :name => "ec2_access_key1",
          :description => "Description4",
          :auth_type_cd => "03",
          :auth_values => {"access_key"=>"1", "secret_access_key"=>"2", "default_region" => 3},
        )
      end

      it "ソートパラメータを指定しないとき@credentialsがnameの昇順にソートされていること" do
        get :index

        actuals = assigns(:credentials)
        [@c3,@c1,@c2].each_with_index do |expected, i|
          actuals[i].name.should == expected.name
        end
      end

      it "nameの昇順でソートしたとき@credentiaosがnameの昇順にソートされていること" do
        get :index, :sort => {:name => "asc"}

        actuals = assigns(:credentials)
        [@c3,@c1,@c2].each_with_index do |expected, i|
          actuals[i].name.should == expected.name
        end
      end

      it "nameの降順でソートしたとき@credentialssがnameの降順にソートされていること" do
        get :index, :sort => {:name => "desc"}

        actuals = assigns(:credentials)
        [@c2,@c1,@c3].each_with_index do |expected, i|
          actuals[i].name.should == expected.name
        end
      end

      it "descriptionの昇順でソートしたとき@credentialsがdescriptionの昇順にソートされていること" do
        get :index, :sort => {:description => "asc"}

        actuals = assigns(:credentials)
        [@c3,@c2,@c1].each_with_index do |expected, i|
          actuals[i].name.should == expected.name
        end
      end

      it "descriptionの降順でソートしたとき@credentialssがdescriptionの降順にソートされていること" do
        get :index, :sort => {:description => "desc"}

        actuals = assigns(:credentials)
        [@c1,@c2,@c3].each_with_index do |expected, i|
          actuals[i].description.should == expected.description
        end
      end

      it "auth_type_cdの昇順でソートしたとき@credentialsがauth_type_cdのidの昇順にソートされていること" do
        get :index, :sort => {:auth_type_cd => "asc"}

        actuals = assigns(:credentials)
        [@c1,@c2,@c3].each_with_index do |expected, i|
          actuals[i].description.should == expected.description
        end
      end

      it "auth_type_cdの降順でソートしたとき@credentialssがauth_type_cdのidの降順にソートされていること" do
        get :index, :sort => {:auth_type_cd => "desc"}

        actuals = assigns(:credentials)
        [@c3,@c2,@c1].each_with_index do |expected, i|
          actuals[i].auth_type_cd.should == expected.auth_type_cd
        end
      end
    end

    describe "?find" do
      before do
        Tengine::Resource::Credential.delete_all
        @c1= Tengine::Resource::Credential.create!(
          :name => "ssh_password1",
          :description => "Description6",
          :auth_type_cd => "01",
          :auth_values => {"username"=>"1", "password"=>"2"},
        )
        @c2= Tengine::Resource::Credential.create!(
          :name => "ssh_public_key1",
          :description => "Description5",
          :auth_type_cd => "02",
          :auth_values => {"username"=>"1", "private_keys"=>"2", "passphrase" => 3},
        )
        @c3= Tengine::Resource::Credential.create!(
          :name => "ec2_access_key1",
          :description => "Description4",
          :auth_type_cd => "03",
          :auth_values => {"access_key"=>"1", "secret_access_key"=>"2", "default_region" => 3},
        )
        @c4= Tengine::Resource::Credential.create!(
          :name => "ssh_password2",
          :description => "description3",
          :auth_type_cd => "01",
          :auth_values => {"username"=>"1", "password"=>"2"},
        )
        @c5= Tengine::Resource::Credential.create!(
          :name => "ssh_public_key2",
          :description => "description2",
          :auth_type_cd => "02",
          :auth_values => {"username"=>"1", "private_keys"=>"2", "passphrase" => 3},
        )
        @c6= Tengine::Resource::Credential.create!(
          :name => "ec2_access_key2",
          :description => "description1",
          :auth_type_cd => "03",
          :auth_values => {"access_key"=>"1", "secret_access_key"=>"2", "default_region" => 3},
        )
      end

      it "finderのクエリーパラメータを指定しないとき@credentialsが6件であること" do
        get :index
        actuals = assigns(:credentials)
        actuals.count.should == 6
      end

      it "認証情報種別のSSHパスワード認証をチェックして検索したとき@credentialsが2件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "0", :auth_type_cd_03 => "0"}
        actuals = assigns(:credentials)
        actuals.count.should == 2
      end

      it "認証情報種別のSSH公開鍵認証をチェックして検索したとき@credentialsが2件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "0", :auth_type_cd_02 => "1", :auth_type_cd_03 => "0"}
        actuals = assigns(:credentials)
        actuals.count.should == 2
      end

      it "認証情報種別のEC2アクセスキー認証をチェックして検索したとき@credentialsが2件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "0", :auth_type_cd_02 => "0", :auth_type_cd_03 => "1"}
        actuals = assigns(:credentials)
        actuals.count.should == 2
      end

      it "認証情報種別のSSHパスワード認証とSSH公開鍵認証をチェックして検索したとき@credentialsが4件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "1", :auth_type_cd_03 => "0"}
        actuals = assigns(:credentials)
        actuals.count.should == 4
      end

      it "認証情報種別のSSHパスワード認証とEC2アクセスキー認証をチェックして検索したとき@credentialsが4件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "0", :auth_type_cd_03 => "1"}
        actuals = assigns(:credentials)
        actuals.count.should == 4
      end

      it "認証情報種別のSSH公開鍵認証とEC2アクセスキー認証をチェックして検索したとき@credentialsが4件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "0", :auth_type_cd_02 => "1", :auth_type_cd_03 => "1"}
        actuals = assigns(:credentials)
        actuals.count.should == 4
      end

      it "認証情報種別のSSHパスワード認証とSSH公開鍵認証およびEC2アクセスキー認証をチェックして検索したとき@credentialsが6件であること" do
        get :index, :finder => {:name => "", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "1", :auth_type_cd_03 => "1"}
        actuals = assigns(:credentials)
        actuals.count.should == 6
      end

      it "認証情報種別をすべて選択し、nameにsshを入力して検索したとき検索結果はnameにsshを含むものが4件取得できること" do
        get :index, :finder => {:name => "ssh", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "1", :auth_type_cd_03 => "1"}

        actuals = assigns(:credentials)
        actuals.count.should == 4
        actuals.each do |actual|
          actual.name.should =~ /ssh/
        end
      end

      it "認証情報種別をすべて選択し、descriptionに1を入力して検索したとき検索結果はdescriptionにを含むものが1件取得できること" do
        get :index, :finder => {:name => "", :description => "1",:auth_type_cd_01 => "1", :auth_type_cd_02 => "1", :auth_type_cd_03 => "1"}

        actuals = assigns(:credentials)
        actuals.count.should == 1
        actuals.each do |actual|
          actual.description.should =~ /1/
        end
      end

      it "認証情報種別のSSHパスワード認証をチェックして、nameに1を入力して検索したとき@credentialsが1件であること" do
        get :index, :finder => {:name => "1", :description => "", :auth_type_cd_01 => "1", :auth_type_cd_02 => "0", :auth_type_cd_03 => "0"}

        actuals = assigns(:credentials)
        actuals.count.should == 1
        actuals.each do |actual|
          actual.name.should =~ /1/
        end
      end

      it "認証情報種別のSSH公開鍵認証とEC2アクセスキー認証をチェックし、nameにkey2を入力して検索したとき@credentialsが2件であること" do
        get :index, :finder => {:name => "key2", :description => "", :auth_type_cd_01 => "0", :auth_type_cd_02 => "1", :auth_type_cd_03 => "1"}

        actuals = assigns(:credentials)
        actuals.count.should == 2
        actuals.each do |actual|
          actual.name.should =~ /key2/
        end
      end

      it "認証情報種別のSSHパスワード認証とSSH公開鍵認証をチェックし、nameにssh、descriptionにdescを入力して検索したとき@credentialsが2件であること" do
        get :index, :finder => {:name => "ssh", :description => "desc", :auth_type_cd_01 => "1", :auth_type_cd_02 => "1", :auth_type_cd_03 => "0"}

        actuals = assigns(:credentials)
        actuals.count.should == 2
        actuals.each do |actual|
          actual.name.should =~ /ssh/
          actual.description.should =~ /desc/
        end
      end

    end
  end

  describe "GET show" do
    it "assigns the requested credential as @credential" do
      credential = Tengine::Resource::Credential.create! valid_attributes
      get :show, :id => credential.id.to_s
      assigns(:credential).should eq(credential)
    end
  end

  describe "GET new" do
    it "assigns a new credential as @credential" do
      get :new
      assigns(:credential).should be_a_new(Tengine::Resource::Credential)
    end
  end

  describe "GET edit" do
    it "assigns the requested credential as @credential" do
      credential = Tengine::Resource::Credential.create! valid_attributes
      get :edit, :id => credential.id.to_s
      assigns(:credential).should eq(credential)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Resource::Credential" do
        expect {
          post :create, :credential => valid_attributes
        }.to change(Tengine::Resource::Credential, :count).by(1)
      end

      it "assigns a newly created credential as @credential" do
        post :create, :credential => valid_attributes
        assigns(:credential).should be_a(Tengine::Resource::Credential)
        assigns(:credential).should be_persisted
      end

      it "redirects to the created credential" do
        post :create, :credential => valid_attributes
        response.should redirect_to(Tengine::Resource::Credential.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved credential as @credential" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::Credential.any_instance.stub(:save).and_return(false)
        post :create, :credential => {}
        assigns(:credential).should be_a_new(Tengine::Resource::Credential)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::Credential.any_instance.stub(:save).and_return(false)
        post :create, :credential => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested credential" do
        credential = Tengine::Resource::Credential.create! valid_attributes
        # Assuming there are no other tengine_resource_credentials in the database, this
        # specifies that the Tengine::Resource::Credential created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Resource::Credential.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => credential.id, :credential => {'these' => 'params'}
      end

      it "assigns the requested credential as @credential" do
        credential = Tengine::Resource::Credential.create! valid_attributes
        put :update, :id => credential.id, :credential => valid_attributes
        assigns(:credential).should eq(credential)
      end

      it "redirects to the credential" do
        credential = Tengine::Resource::Credential.create! valid_attributes
        put :update, :id => credential.id, :credential => valid_attributes
        response.should redirect_to(credential)
      end
    end

    describe "with invalid params" do
      it "assigns the credential as @credential" do
        credential = Tengine::Resource::Credential.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::Credential.any_instance.stub(:save).and_return(false)
        put :update, :id => credential.id.to_s, :credential => {}
        assigns(:credential).should eq(credential)
      end

      it "re-renders the 'edit' template" do
        credential = Tengine::Resource::Credential.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::Credential.any_instance.stub(:save).and_return(false)
        put :update, :id => credential.id.to_s, :credential => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested credential" do
      credential = Tengine::Resource::Credential.create! valid_attributes
      expect {
        delete :destroy, :id => credential.id.to_s
      }.to change(Tengine::Resource::Credential, :count).by(-1)
    end

    it "redirects to the tengine_resource_credentials list" do
      credential = Tengine::Resource::Credential.create! valid_attributes
      delete :destroy, :id => credential.id.to_s
      response.should redirect_to(tengine_resource_credentials_url)
    end
  end

end
