# -*- coding: utf-8 -*-
require 'spec_helper'
require "ostruct"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Resource::VirtualServersController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Resource::VirtualServer. As you add validations to Tengine::Resource::VirtualServer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "virtual_server1"
    }
  end

  def valid_attributes_for_physical
    {
      :name => "physical_server1"
    }
  end

  before do
    Tengine::Resource::Server.delete_all
  end

  describe "GET index" do
    it "assigns all tengine_resource_physical_servers as @tengine_resource_physical_servers" do
      Tengine::Resource::PhysicalServer.delete_all
      physical_server = \
        Tengine::Resource::PhysicalServer.create! valid_attributes_for_physical
      get :index
      physical_servers = assigns(:physical_servers)
      physical_servers.to_a.should eq([physical_server])
    end

    it "assigns @refresher" do
      get :index, :refresher => {:refresh_interval => 10}
      assigns(:refresher).refresh_interval.should == "10"
      assigns(:refresh_interval).should == "10"
    end

    it "assigns @auto_refresh" do
      get :index, :refresher => {:refresh_interval => 0}
      assigns(:auto_refresh).should == false

      get :index, :refresher => {:refresh_interval => 10}
      assigns(:auto_refresh).should == true
    end

    it "assigns Tengine::Resource::VirtualServer::Finder instance as @finder" do
      get :index
      assigns(:finder).should be_is_a(Tengine::Resource::VirtualServer::Finder)
    end

    it "assigns all PhysicalServer as @physical_server" do
      Tengine::Resource::PhysicalServer.delete_all
      server1 = Tengine::Resource::PhysicalServer.create!(:name => "server1")
      physical_servers = [
        server1,
        Tengine::Resource::PhysicalServer.create!(:name => "server2"),
      ]

      get :index
      assigns(:physical_servers).should == physical_servers

      Tengine::Resource::PhysicalServer.delete_all
      get :index, :finder => {:physical_server_name => "server1"}
      physical_servers = [
        Tengine::Resource::PhysicalServer.create!(:name => "server1"),
      ]
      assigns(:physical_servers).should == physical_servers
    end
  end

  describe "GET show" do
    it "assigns the requested virtual_server as @virtual_server" do
      virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
      get :show, :id => virtual_server.id.to_s
      assigns(:virtual_server).should eq(virtual_server)
    end
  end

  describe "GET new" do
    context "物理サーバが登録されていないとき" do
      before do
        Tengine::Resource::VirtualServerImage.delete_all
        Tengine::Resource::VirtualServerType.delete_all
        Tengine::Resource::PhysicalServer.delete_all
        Tengine::Resource::VirtualServer.delete_all
        Tengine::Resource::Provider.delete_all
      end

      it "各インスタンス変数に初期値が入っていること" do
        get :new

        assigns(:physical_servers).should be_blank
        assigns(:physical_servers_for_select).should == []
        assigns(:virtual_server_images_for_select).should == []
        assigns(:virtual_server_types_for_select).should == []
        assigns(:starting_number).should == 0
        assigns(:starting_number_max).should == 0
        assigns(:physical_server_map_provider).should == {}
        assigns(:virtual_server_images_by_provider).should == {}
        assigns(:virtual_server_types_by_provider).should == {}
        assigns(:capacities_by_provider).should == {}
      end
    end

    context "物理サーバが登録されているとき" do
      before(:each) do
        Tengine::Resource::VirtualServerImage.delete_all
        Tengine::Resource::VirtualServerType.delete_all
        Tengine::Resource::PhysicalServer.delete_all
        Tengine::Resource::VirtualServer.delete_all
        Tengine::Resource::Provider.delete_all
        @provider = Tengine::Resource::Provider::Wakame.create!(
          :name => "provider1",
          :description => "Description",
        )
        @image1 = Tengine::Resource::VirtualServerImage.create!(
          :provider_id => @provider.id,
          :name => "vimage1",
          :description => "Description",
          :provided_id => "ami1",
        )
        @image2 = Tengine::Resource::VirtualServerImage.create!(
          :provider_id => @provider.id,
          :name => "vimage2",
          :description => "Description",
          :provided_id => "ami2",
        )
        @type1 = Tengine::Resource::VirtualServerType.create!(
          :provider_id => @provider.id,
          :provided_id => "Large",
          :caption => "Large",
          :cpu_cores => 2,
          :memory_size => 5.gigabyte,
        )
        @type2 = Tengine::Resource::VirtualServerType.create!(
          :provider_id => @provider.id,
          :provided_id => "Small",
          :caption => "Small",
          :cpu_cores => 1,
          :memory_size => 2.gigabyte,
        )
        @physical_server1 = Tengine::Resource::PhysicalServer.create!(
          :provider_id => @provider.id,
          :name => "pserver1",
          :provided_id => "server1",
          :description => "Description",
          :status => "online",
          :addresses => {"eth0"=>"192.168.1.1", "eth1"=>"10.10.10.1"},
          :properties => {"a"=>"1", "b"=>"2"},
          :cpu_cores => 10,
          :memory_size => 30.gigabyte,
        )
        @virtual_server1 = Tengine::Resource::VirtualServer.create!(
          :provider_id => @provider.id,
          :name => "vserver1",
          :provided_id => "i0002",
          :description => "v2Description",
          :status => "Status",
          :addresses => {"ip_address"=>"192.168.1.1", "eth1"=>"10.10.10.1"},
          :properties => {"a"=>"1", "b"=>"2"},
          :provided_image_id => "ami1",
          :provided_type_id => "Large",
          :host_server_id => @physical_server1.id,
        )
      end

      after do
        Tengine::Resource::VirtualServerImage.delete_all
        Tengine::Resource::VirtualServerType.delete_all
        Tengine::Resource::PhysicalServer.delete_all
        Tengine::Resource::VirtualServer.delete_all
        Tengine::Resource::Provider.delete_all
      end

      it "assigns a new virtual_server as @virtual_server" do
        get :new
        assigns(:virtual_server).should be_a_new(Tengine::Resource::VirtualServer)
      end

      it "assigns all PhysicalServer as @physical_servers" do
        get :new
        assigns(:physical_servers).should == [@physical_server1]
      end

      it "assigns all PhysicalServer as @physical_servers_for_select" do
        get :new
        label = "#{@physical_server1.name}(#{@physical_server1.description})"
        assigns(:physical_servers_for_select).should == [[label, @physical_server1.provided_id]]
      end

      it "assigns VirtualServerImage as @virtual_server_images_for_select" do
        get :new
        assigns(:virtual_server_images_for_select).should == [["vimage1(Description)", "ami1"], ["vimage2(Description)", "ami2"]]
      end

      it "assigns VirtualServerType as @virtual_server_types_for_select" do
        get :new
        assigns(:virtual_server_types_for_select).should == [["Large(CPUコア数:2, メモリサイズ:5120MB)", "Large"], ["Small(CPUコア数:1, メモリサイズ:2048MB)", "Small"]]
      end

      it "@starting_number_max" do
        get :new
        assigns(:starting_number_max).should == 4
      end

      it "@starting_number" do
        get :new
        assigns(:starting_number).should == 0
      end

      it "@physical_server_map_provider" do
        get :new
        assigns(:physical_server_map_provider).should == {@physical_server1.provided_id => @provider.id.to_s}
      end

      it "@virtual_server_images_by_provider" do
        get :new
        label = "#{@virtual_server1.name}(#{@virtual_server1.description})"
        assigns(:virtual_server_images_by_provider).should == {@provider.id.to_s => [["vimage1(Description)", "ami1"], ["vimage2(Description)", "ami2"]]}
      end

      it "@virtual_server_types_for_select" do
        get :new
        assigns(:virtual_server_types_for_select).should == [["Large(CPUコア数:2, メモリサイズ:5120MB)", "Large"], ["Small(CPUコア数:1, メモリサイズ:2048MB)", "Small"]]
      end

      it "@capacities_by_provider" do
        get :new
        assigns(:capacities_by_provider).should == {@provider.id.to_s => @provider.capacities}
      end
    end
  end

  describe "GET edit" do
    it "assigns the requested virtual_server as @virtual_server" do
      virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
      get :edit, :id => virtual_server.id.to_s
      assigns(:virtual_server).should eq(virtual_server)
    end
  end

  describe "POST create" do
    before(:each) do
      Tengine::Resource::VirtualServerImage.delete_all
      Tengine::Resource::VirtualServerType.delete_all
      Tengine::Resource::PhysicalServer.delete_all
      Tengine::Resource::VirtualServer.delete_all
      Tengine::Resource::Provider.delete_all
      @provider = Tengine::Resource::Provider::Wakame.create!(
        :name => "provider1",
        :description => "Description",
      )
      @image1 = Tengine::Resource::VirtualServerImage.create!(
        :provider_id => @provider.id,
        :name => "vimage1",
        :description => "Description",
        :provided_id => "ami1",
      )
      @image2 = Tengine::Resource::VirtualServerImage.create!(
        :provider_id => @provider.id,
        :name => "vimage2",
        :description => "Description",
        :provided_id => "ami2",
      )
      @type1 = Tengine::Resource::VirtualServerType.create!(
        :provider_id => @provider.id,
        :provided_id => "Large",
        :caption => "Large",
        :cpu_cores => 2,
        :memory_size => 5.gigabyte,
      )
      @type2 = Tengine::Resource::VirtualServerType.create!(
        :provider_id => @provider.id,
        :provided_id => "Small",
        :caption => "Small",
        :cpu_cores => 1,
        :memory_size => 2.gigabyte,
      )
      @physical_server1 = Tengine::Resource::PhysicalServer.create!(
        :provider_id => @provider.id,
        :name => "pserver1",
        :provided_id => "server1",
        :description => "Description",
        :status => "online",
        :addresses => {"eth0"=>"192.168.1.1", "eth1"=>"10.10.10.1"},
        :properties => {"a"=>"1", "b"=>"2"},
        :cpu_cores => 10,
        :memory_size => 30.gigabyte,
      )
      @virtual_server1 = Tengine::Resource::VirtualServer.create!(
        :provider_id => @provider.id,
        :name => "vserver1",
        :provided_id => "i0002",
        :description => "v2Description",
        :status => "Status",
        :addresses => {"ip_address"=>"192.168.1.1", "eth1"=>"10.10.10.1"},
        :properties => {"a"=>"1", "b"=>"2"},
        :provided_image_id => "ami1",
        :provided_type_id => "Large",
        :host_server_id => @physical_server1.id,
      )
    end

    after do
      Tengine::Resource::VirtualServerImage.delete_all
      Tengine::Resource::VirtualServerType.delete_all
      Tengine::Resource::PhysicalServer.delete_all
      Tengine::Resource::VirtualServer.delete_all
      Tengine::Resource::Provider.delete_all
    end


    def valid_attributes_for_create
      attributes = {
        "name"=>"test",
        "host_server_id"=>"server1",
        "provided_image_id"=>"ami1",
        "provided_type_id"=>"Small",
        "starting_number"=>"1",
        "description"=>"description",
      }
      return attributes
    end

    def valid_params
      params = {
        "starting_number_max" => 8,
        "virtual_server" => valid_attributes_for_create,
      }
      return params
    end

    describe "with valid params" do
      it "creates a new Tengine::Resource::VirtualServer" do
        vs = OpenStruct.new(:provided_id => "ami0000005",)
        Tengine::Resource::Provider::Wakame.any_instance.
          should_receive(:create_virtual_servers).and_return([vs])

        post :create, valid_params
      end

      it "redirects to the created virtual_server" do
        vs = OpenStruct.new(:provided_id => "ami0000005",)
        Tengine::Resource::Provider::Wakame.any_instance.
          should_receive(:create_virtual_servers).and_return([vs])

        post :create, valid_params
        response.should redirect_to(created_tengine_resource_virtual_servers_url(:provieded_ids => ["ami0000005"]))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved virtual_server as @virtual_server" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServer.any_instance.stub(:valid?).and_return(false)
        Tengine::Resource::Provider::Wakame.any_instance.
          should_not_receive(:create_virtual_servers)

        invalid_params = valid_params
        invalid_params["virtual_server"].delete "name"
        post :create, invalid_params


        Tengine::Resource::VirtualServer.any_instance.stub(:valid?).and_return(true)

        invalid_params = valid_params
        invalid_params["virtual_server"].delete "starting_number"
        post :create, invalid_params

        invalid_params = valid_params
        invalid_params["virtual_server"]["starting_number"] = "-10"
        post :create, invalid_params

        invalid_params["virtual_server"]["starting_number"] = "100"
        post :create, invalid_params
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServer.any_instance.stub(:valid?).and_return(false)
        invalid_params = valid_params
        invalid_params["virtual_server"].delete "name"
        post :create, invalid_params
        response.should render_template("new")
      end

      it "holds starting_number and starting_number_max" do
        invalid_params = valid_params
        invalid_params["virtual_server"].delete "name"
        post :create, invalid_params
        assigns(:starting_number).should == "1"
        assigns(:starting_number_max).should == 8
      end
    end
  end

  describe "GET created" do
    it "assigns the requested provided_ids as @provided_ids" do
      params = ["12345", "09876"]

      get :created, :provided_ids => params
      provided_ids = assigns(:provided_ids)
      provided_ids.should eq(params)

      get :created
      provided_ids = assigns(:provided_ids)
      provided_ids.should eq([])
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested virtual_server" do
        virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
        # Assuming there are no other tengine_resource_virtual_servers in the database, this
        # specifies that the Tengine::Resource::VirtualServer created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Resource::VirtualServer.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => virtual_server.id, :virtual_server => {'these' => 'params'}
      end

      it "assigns the requested virtual_server as @virtual_server" do
        virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
        put :update, :id => virtual_server.id, :virtual_server => valid_attributes
        assigns(:virtual_server).should eq(virtual_server)
      end

      it "redirects to the tengine_resource_virtual_servers list" do
        virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
        put :update, :id => virtual_server.id, :virtual_server => valid_attributes
        response.should redirect_to(tengine_resource_virtual_servers_url)
      end
    end

    describe "with invalid params" do
      it "assigns the virtual_server as @virtual_server" do
        virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServer.any_instance.stub(:save).and_return(false)
        put :update, :id => virtual_server.id.to_s, :virtual_server => {}
        assigns(:virtual_server).should eq(virtual_server)
      end

      it "re-renders the 'edit' template" do
        virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServer.any_instance.stub(:save).and_return(false)
        put :update, :id => virtual_server.id.to_s, :virtual_server => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested virtual_server" do
      virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
      expect {
        delete :destroy, :id => virtual_server.id.to_s
      }.to change(Tengine::Resource::VirtualServer, :count).by(-1)
    end

    it "redirects to the tengine_resource_virtual_servers list" do
      virtual_server = Tengine::Resource::VirtualServer.create! valid_attributes
      delete :destroy, :id => virtual_server.id.to_s
      response.should redirect_to(tengine_resource_virtual_servers_url)
    end
  end

end
