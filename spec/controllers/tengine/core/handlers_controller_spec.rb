# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Core::HandlersController do

  valid_driver_attributes = {:name => "driver1", :version => "123"}

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Core::Handler. As you add validations to Tengine::Core::Handler, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  before do
    Tengine::Core::Driver.delete_all
    @driver = Tengine::Core::Driver.create!(valid_driver_attributes)
  end

  describe "GET index" do
    it "assigns all tengine_core_handlers as @tengine_core_handlers" do
      handler = @driver.handlers.create!(valid_attributes)
      get :index, :driver_id => @driver.id
      handlers = assigns(:handlers)
      handlers.to_a.should eq([handler])
    end
  end

  describe "GET show" do
    it "assigns the requested handler as @handler" do
      handler = @driver.handlers.create!(valid_attributes)
      get :show, :driver_id => @driver.id, :id => handler.id.to_s
      assigns(:handler).should eq(handler)
    end
  end

  describe "GET new" do
    it "assigns a new handler as @handler" do
      get :new, :driver_id => @driver.id
      assigns(:handler).should be_a_new(Tengine::Core::Handler)
    end
  end

  describe "GET edit" do
    it "assigns the requested handler as @handler" do
      handler = @driver.handlers.create! valid_attributes
      get :edit, :driver_id => @driver.id, :id => handler.id.to_s
      assigns(:handler).should eq(handler)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Core::Handler" do
        # expect {
        #   post :create, :driver_id => @driver.id, :handler => valid_attributes
        #   @driver.reload
        # }.to change(@driver.handlers, :count).by(1)
        # 上のように書いてしまうと @driver.handlers が参照するプロキシオブジェクトが同一で
        # かつキャッシュされているため期待通りに動いてくれないので、敢えてexpect{}.to change(...)を使用しません。
        count = @driver.handlers.count
        post :create, :driver_id => @driver.id, :handler => valid_attributes
        @driver.reload
        @driver.handlers.count.should == count + 1
      end

      it "assigns a newly created handler as @handler" do
        post :create, :driver_id => @driver.id, :handler => valid_attributes
        assigns(:handler).should be_a(Tengine::Core::Handler)
        assigns(:handler).should be_persisted
      end

      it "redirects to the created handler" do
        post :create, :driver_id => @driver.id, :handler => valid_attributes
        @driver.reload # ここでreloadしないとhandlersを再取得しないので、@driver.handlers.lastがnilになってしまいます。
        response.should redirect_to(tengine_core_driver_handler_url(@driver, @driver.handlers.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved handler as @handler" do
        # Trigger the behavior that occurs when invalid params are submitted
        @driver.handlers.any_instance.stub(:save).and_return(false)
        post :create, :driver_id => @driver.id, :handler => {}
        assigns(:handler).should be_a_new(Tengine::Core::Handler)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        @driver.handlers.any_instance.stub(:save).and_return(false)
        post :create, :driver_id => @driver.id, :handler => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested handler" do
        handler = @driver.handlers.create! valid_attributes
        # Assuming there are no other tengine_core_handlers in the database, this
        # specifies that the Tengine::Core::Handler created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        @driver.handlers.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :driver_id => @driver.id, :id => handler.id, :handler => {'these' => 'params'}
      end

      it "assigns the requested handler as @handler" do
        handler = @driver.handlers.create! valid_attributes
        put :update, :driver_id => @driver.id, :id => handler.id, :handler => valid_attributes
        assigns(:handler).should eq(handler)
      end

      it "redirects to the handler" do
        handler = @driver.handlers.create! valid_attributes
        put :update, :driver_id => @driver.id, :id => handler.id, :handler => valid_attributes
        response.should redirect_to(tengine_core_driver_handler_url(@driver, handler))
      end
    end

    describe "with invalid params" do
      it "assigns the handler as @handler" do
        handler = @driver.handlers.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @driver.handlers.any_instance.stub(:save).and_return(false)
        put :update, :driver_id => @driver.id, :id => handler.id.to_s, :handler => {}
        assigns(:handler).should eq(handler)
      end

      it "re-renders the 'edit' template" do
        handler = @driver.handlers.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @driver.handlers.any_instance.stub(:save).and_return(false)
        put :update, :driver_id => @driver.id, :id => handler.id.to_s, :handler => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested handler" do
      handler = @driver.handlers.create! valid_attributes
      count = @driver.handlers.count
      delete :destroy, :driver_id => @driver.id, :id => handler.id.to_s
      @driver.reload
      @driver.handlers.count.should == count - 1
    end

    it "redirects to the tengine_core_handlers list" do
      handler = @driver.handlers.create! valid_attributes
      delete :destroy, :driver_id => @driver.id, :id => handler.id.to_s
      response.should redirect_to(tengine_core_driver_handlers_url(@driver))
    end
  end

end
