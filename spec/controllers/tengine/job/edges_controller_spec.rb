require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Job::EdgesController do

  before do
    Tengine::Job::Vertex.delete_all
    @jobnet = Tengine::Job::JobnetTemplate.new(:name => "root_jobnet1")
    @jobnet.children << @job1 = Tengine::Job::JobnetTemplate.new(:name => "job1", :script => "job_test job1")
    @jobnet.children << @job2 = Tengine::Job::JobnetTemplate.new(:name => "job2", :script => "job_test job2")
    @jobnet.save!
  end

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Job::Edge. As you add validations to Tengine::Job::Edge, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :origin_id => @job1.id,
      :destination_id => @job2.id,
    }
  end

  describe "GET index" do
    it "assigns all tengine_job_edges as @tengine_job_edges" do
      edge = @jobnet.edges.create! valid_attributes
      get :index, :jobnet_id => @jobnet.id
      edges = assigns(:edges)
      edges.to_a.should eq([edge])
    end
  end

  describe "GET show" do
    it "assigns the requested edge as @edge" do
      edge = @jobnet.edges.create! valid_attributes
      get :show, :id => edge.id.to_s, :jobnet_id => @jobnet.id
      assigns(:edge).should eq(edge)
    end
  end

  describe "GET new" do
    it "assigns a new edge as @edge" do
      get :new, :jobnet_id => @jobnet.id
      assigns(:edge).should be_a_new(Tengine::Job::Edge)
    end
  end

  describe "GET edit" do
    it "assigns the requested edge as @edge" do
      edge = @jobnet.edges.create! valid_attributes
      get :edit, :id => edge.id.to_s, :jobnet_id => @jobnet.id
      assigns(:edge).should eq(edge)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new @jobnet.edges" do
        count = @jobnet.edges.count
        post :create, :edge => valid_attributes, :jobnet_id => @jobnet.id
        @jobnet.reload
        @jobnet.edges.count.should == count + 1
      end

      it "assigns a newly created edge as @edge" do
        post :create, :edge => valid_attributes, :jobnet_id => @jobnet.id
        assigns(:edge).should be_a(Tengine::Job::Edge)
        assigns(:edge).should be_persisted
      end

      it "redirects to the created edge" do
        post :create, :edge => valid_attributes, :jobnet_id => @jobnet.id
        @jobnet.reload
        response.should redirect_to(tengine_job_jobnet_edge_url(@jobnet, @jobnet.edges.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved edge as @edge" do
        # Trigger the behavior that occurs when invalid params are submitted
        @jobnet.edges.any_instance.stub(:save).and_return(false)
        post :create, :edge => {}, :jobnet_id => @jobnet.id
        assigns(:edge).should be_a_new(Tengine::Job::Edge)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        @jobnet.edges.any_instance.stub(:save).and_return(false)
        post :create, :edge => {}, :jobnet_id => @jobnet.id
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested edge" do
        edge = @jobnet.edges.create! valid_attributes
        # Assuming there are no other tengine_job_edges in the database, this
        # specifies that the @jobnet.edges created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        @jobnet.edges.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => edge.id, :edge => {'these' => 'params'}, :jobnet_id => @jobnet.id
      end

      it "assigns the requested edge as @edge" do
        edge = @jobnet.edges.create! valid_attributes
        put :update, :id => edge.id, :edge => valid_attributes, :jobnet_id => @jobnet.id
        assigns(:edge).should eq(edge)
      end

      it "redirects to the edge" do
        edge = @jobnet.edges.create! valid_attributes
        put :update, :id => edge.id, :edge => valid_attributes, :jobnet_id => @jobnet.id
        response.should redirect_to(tengine_job_jobnet_edge_url(@jobnet, edge))
      end
    end

    describe "with invalid params" do
      it "assigns the edge as @edge" do
        edge = @jobnet.edges.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @jobnet.edges.any_instance.stub(:save).and_return(false)
        put :update, :id => edge.id.to_s, :edge => {}, :jobnet_id => @jobnet.id
        assigns(:edge).should eq(edge)
      end

      it "re-renders the 'edit' template" do
        edge = @jobnet.edges.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @jobnet.edges.any_instance.stub(:save).and_return(false)
        put :update, :id => edge.id.to_s, :edge => {}, :jobnet_id => @jobnet.id
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested edge" do
      edge = @jobnet.edges.create! valid_attributes
      count = @jobnet.edges.count
      delete :destroy, :id => edge.id.to_s, :jobnet_id => @jobnet.id
      @jobnet.reload
      @jobnet.edges.count.should == count - 1
    end

    it "redirects to the tengine_job_edges list" do
      edge = @jobnet.edges.create! valid_attributes
      delete :destroy, :id => edge.id.to_s, :jobnet_id => @jobnet.id
      response.should redirect_to(tengine_job_edges_url)
    end
  end

end
