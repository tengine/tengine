# -*- coding: utf-8 -*-
require 'spec_helper'
require 'tmpdir'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Job::RootJobnetTemplatesController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Job::RootJobnetTemplate. As you add validations to Tengine::Job::RootJobnetTemplate, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "Name",
      :server_name => "Server Name",
      :credential_name => "Credential Name",
      :killing_signals => ["abc", "123"],
      :killing_signal_interval => 1,
      :description => "Description",
      :script => "Script",
      :jobnet_type_cd => 2,
      :lock_version => 3,
      :dsl_filepath => "Dsl Filepath",
      :dsl_lineno => 4,
      :dsl_version => "1"
    }
  end

  describe "GET index" do
    describe "&sort" do
      before(:each) do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")

        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        Tengine::Job::RootJobnetTemplate.create!(
          #:id => BSON::ObjectId("4e955633c3406b3a9f000000"),
          :name => "9Name1",
          :server_name => "Server Name1",
          :credential_name => "Credential Name1",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "9Description1",
          :script => "Script1",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath1",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          #:id => BSON::ObjectId("4e955633c3406b3a9f000000"),
          :name => "2Name1",
          :server_name => "Server Name1",
          :credential_name => "Credential Name1",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "2Description1",
          :script => "Script1",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath1",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          #:id => BSON::ObjectId("4e955633c3406b3a9f000000"),
          :name => "1Name2",
          :server_name => "Server Name2",
          :credential_name => "Credential Name2",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "3Description2",
          :script => "Script2",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath2",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          #:id => BSON::ObjectId("4e955633c3406b3a9f000000"),
          :name => "3Name3",
          :server_name => "Server Name3",
          :credential_name => "Credential Name3",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "1Description3",
          :script => "Script3",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath3",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
      end

      it "assigns all tengine_job_root_jobnet_templates as @tengine_job_root_jobnet_templates" do
        Tengine::Job::RootJobnetTemplate.delete_all
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        get :index
        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.to_a.should eq([root_jobnet_template])
      end

      it "assigns all tengine_job_root_jobnet_templates as @root_jobnet_templates" do
        Tengine::Job::Category.delete_all
        category = Tengine::Job::Category.create! valid_attributes
        get :index
        root_categories = assigns(:root_categories)
        root_categories.to_a.should eq([category])
      end

      # BSON::ObjectIdの大きい順、小さい順に値を指定できていないためコメントアウトしています。
      #it "GET index, sort by id asc" do
      #  get :index, :sort => {:id => "asc"}
      #  root_jobnet_templates = assigns(:root_jobnet_templates)
      #  [
      #    BSON::ObjectId("4e955633c3406b3a9f000000"),
      #    BSON::ObjectId("4e955633c3406b3a9f000001"),
      #    BSON::ObjectId("4e955633c3406b3a9f000002"),
      #    BSON::ObjectId("4e955633c3406b3a9f000003"),
      #  ].each_with_index do |expected, i|
      #    root_jobnet_templates[i].id.should eq(expected)
      #  end
      #end

      #it "GET index, sort by id desc" do
      #  get :index, :sort => {:id => "desc"}
      #  root_jobnet_templates = assigns(:root_jobnet_templates)
      #  [
      #    BSON::ObjectId("4e955633c3406b3a9f000003"),
      #    BSON::ObjectId("4e955633c3406b3a9f000002"),
      #    BSON::ObjectId("4e955633c3406b3a9f000001"),
      #    BSON::ObjectId("4e955633c3406b3a9f000000"),
      #  ].each_with_index do |expected, i|
      #    root_jobnet_templates[i].id.should eq(expected)
      #  end
      #end

      it "GET index, sort by name asc" do
        get :index, :sort => {:name => "asc"}
        root_jobnet_templates = assigns(:root_jobnet_templates)
        %w( 1Name2 2Name1 3Name3 9Name1).each_with_index do |expected, i|
          root_jobnet_templates[i].name.should eq(expected)
        end
      end

      it "GET index, sort by name desc" do
        get :index, :sort => {:name => "desc"}
        root_jobnet_templates = assigns(:root_jobnet_templates)
        %w(9Name1 3Name3 2Name1 1Name2).each_with_index do |expected, i|
          root_jobnet_templates[i].name.should eq(expected)
        end
      end

      it "GET index, sort by description asc" do
        get :index, :sort => {:desc => "asc"}
        root_jobnet_templates = assigns(:root_jobnet_templates)
        %w(
          1Description3 2Description1 3Description2 9Description1
        ).each_with_index do |expected, i|
          root_jobnet_templates[i].description.should eq(expected)
        end
      end

      it "GET index, sort by description desc" do
        get :index, :sort => {:desc => "desc"}
        root_jobnet_templates = assigns(:root_jobnet_templates)
        %w(
          9Description1 3Description2 2Description1 1Description3
        ).each_with_index do |expected, i|
          root_jobnet_templates[i].description.should eq(expected)
        end
      end

      it "GET index, ソートのクエリーパラメータが指定されていないときnameの昇順で一覧がソートされていること" do
        get :index
        root_jobnet_templates = assigns(:root_jobnet_templates)
        %w( 1Name2 2Name1 3Name3 9Name1).each_with_index do |expected, i|
          root_jobnet_templates[i].name.should eq(expected)
        end
      end
    end

    describe "&finder" do
      before do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")

        Tengine::Job::Category.delete_all
        Tengine::Job::Vertex.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        Tengine::Job::RootJobnetTemplate.create!(
          :id => BSON::ObjectId("4e955633c3406b3a9f000001"),
          :name => "jobnet_foo_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_foo_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          :id => BSON::ObjectId("4e955633c3406b3a9f000002"),
          :name => "jobnet_bar_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_bar_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          :id => BSON::ObjectId("4e955633c3406b3a9f000003"),
          :name => "jobnet_baz_bar_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_baz_bar_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
      end

      it "検索フォームに何も入力せずに検索したとき3件表示されること" do
        get :index, :finder => {:id => "", :name => "", :description => "",}

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 3
      end

      it "検索フォームにIDが「4e955633c3406b3a9f000009」で検索したときテンプレートジョブネットが1件も表示されないこと" do
        get :index, :finder => {:id => "", :name => "", :description => "",}

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 3
      end

      it "検索フォームにIDが「4e955633c3406b3a9f000001」で検索したとき指定したIDに一致するテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "4e955633c3406b3a9f000001", :name => "", :description => "",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.id.to_s.should == "4e955633c3406b3a9f000001"
      end

      it "検索フォームにNameが「foo」で検索したときNameにfooが含まれるテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "", :name => "foo", :description => "",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.name.should =~ /foo/
      end

      it "検索フォームにNameが「bar」で検索したときNameにbarが含まれるテンプレートジョブネットが2件表示されること" do
        get :index, :finder => {
          :id => "", :name => "bar", :description => "",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 2
        root_jobnet_templates[0].name.should =~ /bar/
        root_jobnet_templates[1].name.should =~ /bar/
      end

      it "検索フォームにDescriptionが「foo」で検索したときDescriptionにfooが含まれるテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "", :name => "", :description => "foo",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.description.should =~ /foo/
      end

      it "検索フォームにDescriptionが「bar」で検索したときDescriptionにbarが含まれるテンプレートジョブネットが2件表示されること" do
        get :index, :finder => {
          :id => "", :name => "", :description => "bar",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 2
        root_jobnet_templates[0].description.should =~ /bar/
        root_jobnet_templates[1].description.should =~ /bar/
      end

      it "検索フォームにIDが「4e955633c3406b3a9f000001」でNameが「foo」で検索したとき指定したIDに一致しNameにfooを含むテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "4e955633c3406b3a9f000001", :name => "foo", :description => "",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.id.to_s.should == "4e955633c3406b3a9f000001"
        root_jobnet_templates.first.name.should =~ /foo/
      end

      it "検索フォームにIDが「4e955633c3406b3a9f000001」でDescriptionが「foo」で検索したとき指定したIDに一致しDescriptionにfooを含むテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "4e955633c3406b3a9f000001", :name => "", :description => "foo",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.id.to_s.should == "4e955633c3406b3a9f000001"
        root_jobnet_templates.first.description.should =~ /foo/
      end

      it "検索フォームにNameが「bar」でDescriptionが「baz」で検索したときNameにbarを含みDescriptionにbazを含むテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "", :name => "bar", :description => "baz",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.name.should =~ /bar/
        root_jobnet_templates.first.description.should =~ /baz/
      end

      it "検索フォームにIDが「4e955633c3406b3a9f000003」でNameが「bar」でDescriptionが「baz」で検索したとき指定したIDに一致しNameにbarを含みDescriptionにbazを含むテンプレートジョブネットが1件表示されること" do
        get :index, :finder => {
          :id => "4e955633c3406b3a9f000003",
          :name => "bar",
          :description => "baz",
        }

        root_jobnet_templates = assigns(:root_jobnet_templates)
        root_jobnet_templates.count.should == 1
        root_jobnet_templates.first.id.to_s.should == "4e955633c3406b3a9f000003"
        root_jobnet_templates.first.name.should =~ /bar/
        root_jobnet_templates.first.description.should =~ /baz/
      end

      context "Nameの降順でソートされていた場合" do
        it "検索フォームにNameが「bar」で検索したときNameにbarを含むテンプレートジョブネットが2件Nameの降順でソートされて表示されること" do
          get :index,
            :finder => { :id => "", :name => "bar", :description => "", },
            :sort   => {:name => "desc"}

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.count.should == 2
          %w(jobnet_baz_bar_test jobnet_bar_test).each_with_index do |expected, i|
            root_jobnet_templates[i].name.should =~ /bar/
            root_jobnet_templates[i].name.should == expected
          end
        end
      end
    end

    describe "&category" do
      before do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")

        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        @foo = Tengine::Job::Category.create!(
          :dsl_version => "1",
          :name => "foo",
          :caption => "ふー"
        )
        @bar = Tengine::Job::Category.create!(
          :dsl_version => "1",
          :name => "bar",
          :caption => "ばー",
          :parent_id => @foo.id
        )
        @foo.children << @bar
        @foo.save!
        @job1 = Tengine::Job::RootJobnetTemplate.create!(
          :name => "jobnet_foo_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_foo_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category_id => @foo.id,
          :lock_version => 3,
          :dsl_filepath => "foo/jobnet_test_1.rb",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        @job2 = Tengine::Job::RootJobnetTemplate.create!(
          :name => "jobnet_bar_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_bar_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category_id => @bar.id,
          :lock_version => 3,
          :dsl_filepath => "foo/bar/jobnet_test_2.rb",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        @job3 = Tengine::Job::RootJobnetTemplate.create!(
          :name => "jobnet_baz_bar_foo_test",
          :server_name => "Server Name",
          :credential_name => "Credential Name",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "jobnet_baz_bar_test description",
          :script => "Script",
          :jobnet_type_cd => 2,
          :category_id => @bar.id,
          :lock_version => 3,
          :dsl_filepath => "foo/bar/jobnet_test_3.rb",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
      end

      context "categoryのクエリーパラメータがないとき" do
        it "@categoryがnilであること" do
          get :index

          category = assigns(:category)
          category.should == nil
        end

        it "@root_jobnet_templatesが3件であること" do
          get :index

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.count.should == 3
        end
      end

      context "categoryのクエリーパラメータで@fooのカテゴリが指定されているとき" do
        it "@categoryが@fooであること" do
          get :index, :category => @foo.id

          category = assigns(:category)
          category.should == @foo
        end

        it "@root_jobnet_templatesが3件であること" do
          get :index, :category => @foo.id

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.count.should == 3
        end

        context "nameにbarを含むものだけに絞り込み検索をしnameの降順でソートしていたとき" do
          it "@root_jobnet_templatesが2件でそれぞれ名前にbarを含みnameの降順でソートされていること" do
            get :index,
              :category => @foo.id,
              :sort => {:name => "desc"},
              :finder => { :id => "", :name => "bar", :description => "", }

            root_jobnet_templates = assigns(:root_jobnet_templates)
            root_jobnet_templates.count.should == 2
            %w(jobnet_baz_bar_foo_test jobnet_bar_test).each_with_index do |expected, i|
              root_jobnet_templates[i].name.should =~ /bar/
              root_jobnet_templates[i].name.should == expected
            end
          end
        end
      end

      context "categoryのクエリーパラメータで@barのカテゴリが指定されているとき" do
        it "@categoryが@barであること" do
          get :index, :category => @bar.id

          category = assigns(:category)
          category.should == @bar
        end

        it "@root_jobnet_templatesが2件であること" do
          get :index, :category => @bar.id

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.count.should == 2
        end

        context "nameの降順のクエリーパラメータがついているとき" do
          it "nameの降順でソートされていること" do
            get :index, :category => @bar.id, :sort => {:name => "desc"}

            root_jobnet_templates = assigns(:root_jobnet_templates)
            %w(jobnet_baz_bar_foo_test jobnet_bar_test).each_with_index do |expected, i|
              root_jobnet_templates[i].name.should == expected
            end
          end
        end

        context "nameにfooを含むものだけに絞り込み検索していたとき" do
          it "@root_jobnet_templatesが1件であること" do
            get :index,
              :category => @bar.id,
              :finder => { :id => "", :name => "foo", :description => "", }

            root_jobnet_templates = assigns(:root_jobnet_templates)
            root_jobnet_templates.count.should == 1
            root_jobnet_templates.first.name =~ /foo/
          end
        end
      end
    end

    describe "dsl_version" do
      before(:each) do
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        Tengine::Job::RootJobnetTemplate.create!(
          :name => "9Name1",
          :server_name => "Server Name1",
          :credential_name => "Credential Name1",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "9Description1",
          :script => "Script1",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath1",
          :dsl_lineno => 4,
          :dsl_version => "1"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          :name => "2Name1",
          :server_name => "Server Name1",
          :credential_name => "Credential Name1",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "2Description1",
          :script => "Script1",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath1",
          :dsl_lineno => 4,
          :dsl_version => "2"
        )
        Tengine::Job::RootJobnetTemplate.create!(
          :name => "1Name2",
          :server_name => "Server Name2",
          :credential_name => "Credential Name2",
          :killing_signals => ["abc", "123"],
          :killing_signal_interval => 1,
          :description => "3Description2",
          :script => "Script2",
          :jobnet_type_cd => 2,
          :category => category,
          :lock_version => 3,
          :dsl_filepath => "Dsl Filepath2",
          :dsl_lineno => 4,
          :dsl_version => "2"
        )
      end

      context "設定のDSLバージョンが1のとき" do
        before do
          Tengine::Core::Setting.where(:name => "dsl_version").delete_all
          Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")
        end

        it "DSLバージョンが1のRootJobnetTemplateが取得できること" do
          get :index

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.each do |jobnet|
            jobnet.dsl_version.should == "1"
          end
        end
      end

      context "設定のDSLバージョンが2のとき" do
        before do
          Tengine::Core::Setting.where(:name => "dsl_version").delete_all
          Tengine::Core::Setting.create!(:name => "dsl_version", :value => "2")
        end

        it "DSLバージョンが1のRootJobnetTemplateが取得できること" do
          get :index

          root_jobnet_templates = assigns(:root_jobnet_templates)
          root_jobnet_templates.each do |jobnet|
            jobnet.dsl_version.should == "2"
          end
        end
      end
    end
  end

  def load_dsl(dir, filename)
    @bootstrap = Tengine::Core::Bootstrap.new({
      :action => "load",
      :tengined => { :load_path => File.expand_path(filename, dir), :cache_drivers => true },
    })
    @bootstrap.boot
  end

  describe "GET show" do
    describe "" do
      before do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")

        @valid_attributes = valid_attributes.merge(:dsl_version => "1")
      end

      it "assigns the requested root_jobnet_template as @root_jobnet_template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! @valid_attributes
        get :show, :id => root_jobnet_template.id.to_s
        assigns(:root_jobnet_template).should eq(root_jobnet_template)
      end

      it "assigns the requested root_jobnet_template as @jobnet_templates" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! @valid_attributes
        get :show, :id => root_jobnet_template.id.to_s
        assigns(:jobnet_templates).should be_blank
      end
    end

    describe "DSLバージョンが異なるルートジョブネットテンプレートのIDを指定したとき" do
      before do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1")

        Tengine::Job::RootJobnetTemplate.delete_all
        @job1 = Tengine::Job::RootJobnetTemplate.create!(
          valid_attributes.merge(:dsl_version => "1"))
        @job2 = Tengine::Job::RootJobnetTemplate.create!(
          valid_attributes.merge(:dsl_version => "2"))
      end

      it "@job1のIDを指定したとき@job1が設定されていること" do
        get :show, :id => @job1.id.to_s
        assigns(:root_jobnet_template).should == @job1
      end
    end

    describe "構成ジョブがあるルートジョブネットテンプレートのIDを指定したとき" do
      before(:all) do
        Tengine.plugins.add(Tengine::Job)

        Tengine::Job::RootJobnetTemplate.delete_all
        dsl_dir = Dir.tmpdir
        File.open(File.expand_path("VERSION", dsl_dir), "w"){|f| f.write("1") }
        fname = "jn1_jobnet"
        File.open(File.expand_path(fname, dsl_dir), "w") do |f|
          f.write(<<-__end_of_dsl__)
# -*- coding: utf-8 -*-
require 'tengine_job'
# [jn1]
#               
# [S1]-->[j1]-->[j2]-->[E1]
#               
jobnet("jn1", :instance_name => "test_server1", :credential_name => "test_credential1") do
  boot_jobs("j1")
  job("j1", "echo 'j1'", :to => "j2")
  job("j2", "echo 'j2'")
  finally do
    job("jn1_f", "echo 'jn1_f'")
  end
end
__end_of_dsl__
        end
        load_dsl(dsl_dir, fname)
        @root_jobnet_template = Tengine::Job::RootJobnetTemplate.first()
      end

      it "@jobnet_templatesの要素が4つあること" do
        get :show, :id => @root_jobnet_template.id.to_s

        assigns(:jobnet_templates).size.should == 4
      end

      it "@jobnet_templatesの要素が[<ジョブネットテンプレート>, <階層レベル>]であること" do
        get :show, :id => @root_jobnet_template.id.to_s

        j1 = @root_jobnet_template.child_by_name("j1")
        j2 = @root_jobnet_template.child_by_name("j2")
        finally = @root_jobnet_template.child_by_name("finally")
        jn1f = finally.child_by_name("jn1_f")
        expected = [
          [j1, 0],
          [j2, 0],
          [finally, 0],
          [jn1f, 1],
        ]
        assigns(:jobnet_templates).should == expected
      end
    end
  end

  describe "GET new" do
    it "assigns a new root_jobnet_template as @root_jobnet_template" do
      get :new
      assigns(:root_jobnet_template).should be_a_new(Tengine::Job::RootJobnetTemplate)
    end
  end

  describe "GET edit" do
    it "assigns the requested root_jobnet_template as @root_jobnet_template" do
      root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
      get :edit, :id => root_jobnet_template.id.to_s
      assigns(:root_jobnet_template).should eq(root_jobnet_template)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Job::RootJobnetTemplate" do
        expect {
          post :create, :root_jobnet_template => valid_attributes
        }.to change(Tengine::Job::RootJobnetTemplate, :count).by(1)
      end

      it "assigns a newly created root_jobnet_template as @root_jobnet_template" do
        post :create, :root_jobnet_template => valid_attributes
        assigns(:root_jobnet_template).should be_a(Tengine::Job::RootJobnetTemplate)
        assigns(:root_jobnet_template).should be_persisted
      end

      it "redirects to the created root_jobnet_template" do
        post :create, :root_jobnet_template => valid_attributes
        response.should redirect_to(Tengine::Job::RootJobnetTemplate.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved root_jobnet_template as @root_jobnet_template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::RootJobnetTemplate.any_instance.stub(:save).and_return(false)
        post :create, :root_jobnet_template => {}
        assigns(:root_jobnet_template).should be_a_new(Tengine::Job::RootJobnetTemplate)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::RootJobnetTemplate.any_instance.stub(:save).and_return(false)
        post :create, :root_jobnet_template => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested root_jobnet_template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        # Assuming there are no other tengine_job_root_jobnet_templates in the database, this
        # specifies that the Tengine::Job::RootJobnetTemplate created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Job::RootJobnetTemplate.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => root_jobnet_template.id, :root_jobnet_template => {'these' => 'params'}
      end

      it "assigns the requested root_jobnet_template as @root_jobnet_template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        put :update, :id => root_jobnet_template.id, :root_jobnet_template => valid_attributes
        assigns(:root_jobnet_template).should eq(root_jobnet_template)
      end

      it "redirects to the root_jobnet_template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        put :update, :id => root_jobnet_template.id, :root_jobnet_template => valid_attributes
        response.should redirect_to(root_jobnet_template)
      end
    end

    describe "with invalid params" do
      it "assigns the root_jobnet_template as @root_jobnet_template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::RootJobnetTemplate.any_instance.stub(:save).and_return(false)
        put :update, :id => root_jobnet_template.id.to_s, :root_jobnet_template => {}
        assigns(:root_jobnet_template).should eq(root_jobnet_template)
      end

      it "re-renders the 'edit' template" do
        root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::RootJobnetTemplate.any_instance.stub(:save).and_return(false)
        put :update, :id => root_jobnet_template.id.to_s, :root_jobnet_template => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested root_jobnet_template" do
      root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
      expect {
        delete :destroy, :id => root_jobnet_template.id.to_s
      }.to change(Tengine::Job::RootJobnetTemplate, :count).by(-1)
    end

    it "redirects to the tengine_job_root_jobnet_templates list" do
      root_jobnet_template = Tengine::Job::RootJobnetTemplate.create! valid_attributes
      delete :destroy, :id => root_jobnet_template.id.to_s
      response.should redirect_to(tengine_job_root_jobnet_templates_url)
    end
  end

end
