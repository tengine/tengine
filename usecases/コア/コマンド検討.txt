# 起動方法の検討

## 最も簡単にDSLを動かす方法
* 最初にちょっと試すときを想定
* 設定ファイルなし
* DSLファイル一つだけ
{{{
SYNOPSIS
tengined [-k action] [-f path_to_config] [-t path/to/file_or_dir]
         [-H db_host] [-P db_port] [-U db_user] [-S db_pass] [-D db_database]
         [-h queue_host] [-p queue_port] [-u queue_user] [-s queue_pass]

  -k --action            test|start|stop|force-stop default: start
  -f --config            /etc/tengine.yml
  -D --daemon            ignored with "-k test"
     --prevent-enabler   doesn't call event handler enabler when start. usually use with --daemon option
     --prevent-activator doesn't call kernel activator when start. usually use with --daemon option
  -T --tengine-dsl       path/to/file_or_dir. ignored with "-k test"
  -H --db-host           default: localhost
  -P --db-port           default: 27017
  -U --db-user      
  -S --db-pass      
  -D --db-database       default: tengine_production
  -h --queue-host        default: localhost
  -p --queue-port        default: 5672
  -u --queue-user   
  -s --queue-pass   
}}}


* gemをインストールしたらまずテスト
{{{
$ tengined -k test
can't connect to database
}}}
* DBとMQに接続する必要があることを通知
* mongodとrabbitmq-serverを起動したら
{{{
$ tengined -k test
Success!
}}}

* DSLのひな形(hello world的なもの)が生成して(後回し。最初はコピペ)
{{{
$ tengine example > hello_world.rb
}}}
* もう起動できちゃう
{{{
$ tengined -T hello_world.rb
}}}

* デーモンとして起動
{{{
$ tengined -D -T hello_world.rb
}}}

一つのサーバで複数のプロセスを起動する機能は後回し


## 本番環境での使い方
* 設定ファイルを生成できる（後回し。最初はコピペ）
{{{
$ tengine production_config
}}}
* 実際の本番環境を想定
* DSLはcapistranoでデプロイされることを想定
* 設定ファイルは /etc/tengine.yml
{{{
dsl: /home/tengine/capistrano/app/current/dsl
db:
  host: localhost
  port: 27018
  user: user
  pass: pass
  database: tengine_production
queue:
  host: localhost
  port: 5672
  user: user
  pass: pass
}}}

 * /etc/init.d/tengined は init.d系の仕組みに則ったもので、前述のtenginedとは別物。
{{{
$ /etc/init.d/tengined start
$ /etc/init.d/tengined stop
$ /etc/init.d/tengined force-stop
}}}
で操作できる
