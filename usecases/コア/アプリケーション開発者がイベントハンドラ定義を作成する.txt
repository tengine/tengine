ユースケース名:
  アプリケーション開発者がイベントハンドラ定義を作成する

背景:
  アプリケーション開発者はイベントハンドラ定義を作成し、それが正しく定義されていることを確認する為にテストを実施する必要がある。
  イベントハンドラ定義のテストは開発を効率的に行うために開発環境で実施できることが望ましい。
 
概要:
  アプリケーション開発者はイベントハンドラ定義を作成し、それの動作を確認するために開発環境でテストを実施する。
  イベントハンドラ定義のテストはテスティングフレームワークとして RSpec, test-unit, Cucumber を使用する。※注1
  イベントハンドラ定義のテストでは次の観点で実施される。
   * イベントハンドラを定義した文法は正しいか。
   * アプリケーションの振舞いは正しいか。
    * 例えば、「:foo というイベントが発火したら var.sh というスクリプトが実行されること」というような内容のテスト。
    * イベント処理が循環しないか
  Tengineはイベントハンドラ定義のテストをサポートするため、テスティングフレームワークを拡張したテスティングフレームワークエクステンションというコンポーネントを提供する。
  次にイベントハンドラ定義と、それに対するテストコードの例をあげる。
    ------------------------------------------------------
    イベントハンドラ定義の例：
    ------------------------------------------------------
    require 'tengine/core'
    require 'fileutils'

    Tengine.driver :driver_exsample do
      # イベントが発生したら新たなイベントを発火する
      on :event1 do
        fire(:event2)
      end

      on :event2 do
        # event2 が発火したらファイルを作成する
        FileUtils.touch "/tmp/event2"
      end
    end	

    ------------------------------------------------------
    テストコードの例:
    ------------------------------------------------------
    describe :driver_example do
      it :event1 が発火すると、/tmp/event2が作成される do
        # driver_example は event1 を受けてイベントハンドリングする
        driver_example.should_handle_event(:event1)
        # driver_example は event2 を受けてイベントハンドリングする
        driver_example.should_handle_event(:event2)
        # event1 を発火する
        fire(:event1)
        # ファイルが作成されていること
        File.exists?("/tmp/event2").should be_true 
      end
    end
   	------------------------------------------------------

事前条件:
  イベントハンドラ定義の設計が完了している。

成功時保証:
  運用を想定した環境にデプロイされても、想定の振舞いをするイベントハンドラ定義が作成されている。

最低保証:
  なし

登場するコンポーネント:
  テスティングフレームワークエクステンション

登場するパッケージ:
  なし

参照するドキュメント:
  アプリケーション開発者向けTengineマニュアル

基本コース:
  1. アプリケーション開発者はテスティングフレームワークが利用できる環境を構築する。
  2. アプリケーション開発者はテスティングフレームワークエクステンションが利用できる環境を構築する。
  3. アプリケーション開発者はイベントハンドラ定義に対するテストコードを作成する。 <戻り点:テストコード作成>
  4. アプリケーション開発者はイベントハンドラ定義を作成する。
  5. アプリケーション開発者はテストコードを実行する。
  6. テストコードはイベントハンドラ定義に異常がないことをコンソールに表示して知らせる。 [代替コースA, 代替コースB]

代替コースA: イベントハンドラ定義に文法上の誤りがある
  1. テストコードはイベントハンドラ定義に文法上の誤りがあることを知らせる。同時に記述が誤っている箇所を示す。
  2. <戻り点:テストコード作成> に遷移する。

代替コースB: アプリケーションとして振る舞いが不正
  1. システムはアプリケーション開発者が想定した振る舞いと異なることをコンソールに表示して知らせる。
  2. <戻り点:テストコード作成> に遷移する。

注記:
  注1) テスティングフレームワークエクステンションは、RSpec, test-unit, Cucumber の順に対応を行う。
