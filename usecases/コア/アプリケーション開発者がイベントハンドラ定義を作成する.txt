ユースケース名:
  アプリケーション開発者がイベントハンドラ定義を作成する

背景:
  アプリケーション開発者は、アプリケーションの振舞いを定義するためのイベントハンドラ定義ファイルを作成する。
  アプリケーション開発者は、イベントハンドラ定義が正しく定義されていることを確認する為にテストを実施する必要がある。
  イベントハンドラ定義のテストは開発を効率的に行うために開発環境で実施できることが望ましい。
 
概要:
  アプリケーション開発者はイベントハンドラ定義を作成し、それの動作を確認するために開発環境でテストを実施する。
  イベントハンドラ定義のテストは基本的に RSpec を使用するが、test-unit, Cucumber の場合もある。
  イベントハンドラ定義のテストでは次の観点で実施される
   * アプリケーションの振舞いは正しいか
	  * 例えば、「:foo というイベントが発火したら var.sh というスクリプトが実行されること」というような内容のテストをRSpecなどを用いて記述する
   * イベントハンドラを定義した文法は正しいか
   * イベント処理が循環しないか
   * イベントドライバ名に重複はないか

事前条件:
  アプリケーションの設計が完了している
  イベントハンドラ定義を作成、テストするための開発環境が用意されている

事後条件:
  運用を想定した環境にデプロイされても、想定の振舞いをするイベントハンドラ定義が作成されている

登場するコンポーネント:
  なし

基本コース:
  1. アプリケーション開発者はアプリケーションの振舞いに対するテストコードをRSpecなどを用いて作成する。 <戻り点:ユースケース開始>
  2. アプリケーション開発者はイベントハンドラ定義を作成する。
  3. アプリケーション開発者は単一のアプリケーションに対してテストスクリプトを実行する。 [代替コースA]
  4. テストスクリプトはイベントハンドラ定義に異常がないことをコンソールに表示して知らせる。 [代替コースB, 代替コースC, 代替コースD, 代替コースE] <戻り点:テスト結果確認>

代替コースA: アプリケーション間での重複や循環参照を検知するために、複数のアプリケーションを対象にテストを実施
  1. アプリケーション開発者は複数のアプリケーションを指定してテストスクリプトを実行する。
  2. <戻り点:テスト結果確認> に遷移する。

代替コースB: アプリケーションとして振る舞いが不正
  1. システムはアプリケーション開発者が想定した振る舞いと異なることをコンソールに表示して知らせる。
  2. <戻り点:ユースケース開始> に遷移する。

代替コースC: イベントハンドラ定義に文法上の誤りがある
  1. テストスクリプトはイベントハンドラ定義に文法上の誤りがあることを知らせる。同時に記述が誤っている箇所を示す。
  2. <戻り点:ユースケース開始> に遷移する。

代替コースD: イベントハンドラ定義に循環参照がある
  1. テストスクリプトはイベントハンドラ定義に循環参照があることを知らせる。同時に循環参照しているイベントドライバ名を示す。
  2. <戻り点:ユースケース開始> に遷移する。

代替コースE: イベントハンドラ定義にイベントドライバ名の重複がある
  1. テストスクリプトはイベントハンドラ定義にイベントドライバの重複があることを知らせる。同時に重複しているイベントドライバ名を示す。
  2. <戻り点:ユースケース開始> に遷移する。

注記:
  テストツールは始めRSpecのみサポートし、他のものについては徐々に行っていく方針である。
  テストはアプリケーションの構成に依存するため、構成が決定した後にユースケースの見直しが必要である。
   * アプリケーションの構成例
    * tengine new <アプリケーション名> というようなコマンドでアプリケーション用のディレクトリを作成し、そのディレクトリが一つのアプリケーションを表す。
    * 一つのイベントハンドラ定義ファイルがアプリケーションを表す。
