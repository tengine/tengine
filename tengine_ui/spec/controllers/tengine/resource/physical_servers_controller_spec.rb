# # -*- coding: utf-8 -*-

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Resource::PhysicalServersController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Resource::PhysicalServer. As you add validations to Tengine::Resource::PhysicalServer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "physical_server1"
    }
  end

  before do
    Tengine::Resource::PhysicalServer.delete_all
  end

  describe "GET index" do
    it "assigns all tengine_resource_physical_servers as @tengine_resource_physical_servers" do
      Tengine::Resource::PhysicalServer.delete_all
      physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
      get :index
      physical_servers = assigns(:physical_servers)
      physical_servers.to_a.should eq([physical_server])
    end

    it "検索条件のラジオボタンを作るための物理サーバの状態情報が@check_statusに設定されていること" do
      get :index

      check_status = assigns(:check_status)
      states = Tengine::Resource::Provider::Wakame::PHYSICAL_SERVER_STATES
      check_status.size.should == states.size
      states.each do |state|
        check_status = check_status.stringify_keys
        check_status.should be_has_key("st_#{state}")
        check_status["st_#{state}"].should == ["unchecked", state.to_sym]
      end
    end

    it "検索したときに検索条件が@finderと@check_statusに設定されていること" do
      get :index
      finder = assigns(:finder)
      finder.should be_nil

      get :index, finder:{ name:"testname", description:"testdesc",
        provided_id:"testid", st_online:1, st_offline:1 }

      finder = assigns(:finder)
      finder.name.should == "testname"
      finder.description.should == "testdesc"
      finder.provided_id.should == "testid"

      status = assigns(:check_status).stringify_keys
      status["st_online"].should == ["checked", :online]
      status["st_offline"].should == ["checked", :offline]
    end

    it "ソートしたときにソート条件がquery_parametersに設定されていること" do
      get :index
      params = request.query_parameters.stringify_keys
      params["sort"].should == { name:"asc" }

      get :index, sort:{ name:"desc" }
      params = request.query_parameters.stringify_keys
      params["sort"].should == { name:"desc" }

      get :index, sort:{ foo:"desc" }
      params = request.query_parameters.stringify_keys
      params["sort"].should == { name:"asc" }

      %w(provided_id description cpu_cores memory_size status).each do |key|
        get :index, sort:{ key => "asc" }
        params = request.query_parameters.stringify_keys
        params["sort"].should == { key => "asc" }
      end
    end

    context "複数のレコードが登録されているとき" do
      before do
        Tengine::Resource::Provider::Wakame.delete_all
        Tengine::Resource::PhysicalServer.delete_all

        pr1 = Tengine::Resource::Provider::Wakame.create!(name:"testwakame")
        pr2 = Tengine::Resource::Provider::Ec2.create!(name:"testec2")
        @ps1 = Tengine::Resource::PhysicalServer.create!(
          provider_id:pr1.id,
          name:"atestfoo",
          description:"ctest foo description",
          provided_id:"bserver",
          status:"online",
          cpu_cores:5,
          memory_size:20*1024,
        )
        @ps2 = Tengine::Resource::PhysicalServer.create!(
          provider_id:pr2.id,
          name:"btestbarfoo",
          description:"atest baz description",
          provided_id:"cserver",
          status:"offline",
          cpu_cores:10,
          memory_size:10*1024,
        )
        @ps3 = Tengine::Resource::PhysicalServer.create!(
          provider_id:pr1.id,
          name:"ctestbaz",
          description:"btest baz description",
          provided_id:"aserver",
          status:"online",
          cpu_cores:7,
          memory_size:30*1024,
        )
      end

      after do
        Tengine::Resource::Provider.delete_all
        Tengine::Resource::PhysicalServer.delete_all
      end

      it "nameで検索したとき検索条件に合った物理サーバが取得できること" do
        get :index, finder:{ name:"foo" }

        result = assigns(:physical_servers)
        result.count.should == 2
        result.each do |r|
          r.name.should =~ /foo/
        end
      end

      it "descriptionで検索したとき検索条件に合った物理サーバが取得できること" do
        get :index, finder:{ description:"baz" }

        result = assigns(:physical_servers)
        result.count.should == 2
        result.each do |r|
          r.description.should =~ /baz/
        end
      end

      it "provided_idで検索したとき検索条件に合った物理サーバが取得できること" do
        get :index, finder:{ provided_id:"aserver" }

        result = assigns(:physical_servers)
        result.count.should == 1
        result.first.provided_id.should == "aserver"

        get :index, finder:{ provided_id:"cserver" }

        result = assigns(:physical_servers)
        result.count.should == 1
        result.first.provided_id.should == "cserver"
      end

      it "ステータスで検索したとき検索条件に合った物理サーバが取得できること" do
        get :index, finder:{ st_online:1, st_offline:0 }

        result = assigns(:physical_servers)
        result.count.should == 2
        result.each do |r|
          r.status.to_s.should == "online"
        end

        get :index, finder:{ st_online:0, st_offline:1 }

        result = assigns(:physical_servers)
        result.count.should == 1
        result.first.status.to_s.should == "offline"

        get :index, finder:{ st_online:1, st_offline:1 }

        result = assigns(:physical_servers)
        result.count.should == 3
        result.each do |r|
          ["online", "offline"].should be_include(r.status.to_s)
        end

        get :index, finder:{ st_online:0, st_offline:0 }

        result = assigns(:physical_servers)
        result.count.should == 3
      end

      it "デフォルトでソートしたとき" do
        get :index

        result = assigns(:physical_servers)
        [@ps1, @ps2, @ps3].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "nameでソートしたとき" do
        get :index, sort:{ name:"asc" }

        result = assigns(:physical_servers)
        [@ps1, @ps2, @ps3].each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ name:"desc" }

        result = assigns(:physical_servers)
        [@ps3, @ps2, @ps1].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "provided_idでソートしたとき" do
        get :index, sort:{ provided_id:"asc" }

        result = assigns(:physical_servers)
        [@ps3, @ps1, @ps2].each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ provided_id:"desc" }

        result = assigns(:physical_servers)
        [@ps2, @ps1, @ps3].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "descriptionでソートしたとき" do
        get :index, sort:{ description:"asc" }

        result = assigns(:physical_servers)
        [@ps2, @ps3, @ps1].each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ description:"desc" }

        result = assigns(:physical_servers)
        [@ps1, @ps3, @ps2].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "cpu_coresでソートしたとき" do
        get :index, sort:{ cpu_cores:"asc" }

        result = assigns(:physical_servers)
        [@ps1, @ps3, @ps2].each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ cpu_cores:"desc" }

        result = assigns(:physical_servers)
        [@ps2, @ps3, @ps1].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "memory_sizeでソートしたとき" do
        get :index, sort:{ memory_size:"asc" }

        result = assigns(:physical_servers)
        [@ps2, @ps1, @ps3].each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ memory_size:"desc" }

        result = assigns(:physical_servers)
        [@ps3, @ps1, @ps2].each_with_index do |ps, i|
          result[i].should == ps
        end
      end

      it "statusでソートしたとき" do
        get :index, sort:{ status:"asc" }

        result = assigns(:physical_servers)
        expected = Tengine::Resource::PhysicalServer.order_by([[:status, :asc]])
        expected.each_with_index do |ps, i|
          result[i].should == ps
        end

        get :index, sort:{ status:"desc" }

        result = assigns(:physical_servers)
        expected = Tengine::Resource::PhysicalServer.order_by([[:status, :desc]])
        expected.each_with_index do |ps, i|
          result[i].should == ps
        end
      end
    end
  end

  describe "GET show" do
    it "assigns the requested physical_server as @physical_server" do
      physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
      get :show, :id => physical_server.id.to_s
      response.should redirect_to(:action => "index")
    end
  end

  # controlerのnewメソッドと同様にコメントしています。
  # describe "GET new" do
  #   it "assigns a new physical_server as @physical_server" do
  #     get :new
  #     assigns(:physical_server).should be_a_new(Tengine::Resource::PhysicalServer)
  #   end
  # end

  describe "GET edit" do
    it "assigns the requested physical_server as @physical_server" do
      physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
      get :edit, :id => physical_server.id.to_s
      assigns(:physical_server).should eq(physical_server)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Resource::PhysicalServer" do
        expect {
          post :create, :physical_server => valid_attributes
        }.to change(Tengine::Resource::PhysicalServer, :count).by(1)
      end

      it "assigns a newly created physical_server as @physical_server" do
        post :create, :physical_server => valid_attributes
        assigns(:physical_server).should be_a(Tengine::Resource::PhysicalServer)
        assigns(:physical_server).should be_persisted
      end

      it "redirects to the created physical_server" do
        post :create, :physical_server => valid_attributes
        response.should redirect_to(Tengine::Resource::PhysicalServer.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved physical_server as @physical_server" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::PhysicalServer.any_instance.stub(:save).and_return(false)
        post :create, :physical_server => {}
        assigns(:physical_server).should be_a_new(Tengine::Resource::PhysicalServer)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::PhysicalServer.any_instance.stub(:save).and_return(false)
        post :create, :physical_server => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested physical_server" do
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        # Assuming there are no other tengine_resource_physical_servers in the database, this
        # specifies that the Tengine::Resource::PhysicalServer created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Resource::PhysicalServer.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => physical_server.id, :physical_server => {'these' => 'params'}
      end

      it "assigns the requested physical_server as @physical_server" do
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        put :update, :id => physical_server.id, :physical_server => valid_attributes
        assigns(:physical_server).should eq(physical_server)
      end

      it "redirects to the physical_server" do
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        put :update, :id => physical_server.id, :physical_server => valid_attributes
        response.should redirect_to(tengine_resource_physical_servers_url)
      end

      it "commitパラメータがキャンセルのとき更新されずに一覧にリダイレクトされること" do
        Tengine::Resource::PhysicalServer.any_instance.should_not_receive(:update_attributes)
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        put :update, :id => physical_server.id, :physical_server => valid_attributes, :commit => I18n.t("views.links.cancel")
        response.should redirect_to(tengine_resource_physical_servers_url)
      end
    end

    describe "with invalid params" do
      it "assigns the physical_server as @physical_server" do
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::PhysicalServer.any_instance.stub(:save).and_return(false)
        put :update, :id => physical_server.id.to_s, :physical_server => {}
        assigns(:physical_server).should eq(physical_server)
      end

      it "re-renders the 'edit' template" do
        physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::PhysicalServer.any_instance.stub(:save).and_return(false)
        put :update, :id => physical_server.id.to_s, :physical_server => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested physical_server" do
      physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
      expect {
        delete :destroy, :id => physical_server.id.to_s
      }.to change(Tengine::Resource::PhysicalServer, :count).by(-1)
    end

    it "redirects to the tengine_resource_physical_servers list" do
      physical_server = Tengine::Resource::PhysicalServer.create! valid_attributes
      delete :destroy, :id => physical_server.id.to_s
      response.should redirect_to(tengine_resource_physical_servers_url)
    end
  end

end
