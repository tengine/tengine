# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Resource::VirtualServerImagesController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Resource::VirtualServerImage. As you add validations to Tengine::Resource::VirtualServerImage, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "image1"
    }
  end

  before do
    Tengine::Resource::VirtualServerImage.delete_all
  end

  describe "GET index" do
    it "assigns all tengine_resource_virtual_server_images as @tengine_resource_virtual_server_images" do
      virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
      get :index
      virtual_server_images = assigns(:virtual_server_images)
      virtual_server_images.to_a.should eq([virtual_server_image])
    end

    it "プロバイダIDでの検索をしたとき指定した入力の完全一致で検索できること" do
      Tengine::Resource::VirtualServerImage.delete_all
      vi1 = Tengine::Resource::VirtualServerImage.create!(
        name:"testname1",
        provided_id:"ami1",
        provided_description:"test provided desc1",
        description:"test desc1"
      )
      vi2 = Tengine::Resource::VirtualServerImage.create!(
        name:"testname2",
        provided_id:"ami2",
        provided_description:"test provided desc2",
        description:"test desc2"
      )
      vi2 = Tengine::Resource::VirtualServerImage.create!(
        name:"name3",
        provided_id:"ami3",
        provided_description:"aaaaaaaa",
        description:"aaaaaaaa"
      )

      get :index, finder:{provided_id:"ami1"}
      result = assigns(:virtual_server_images)
      result.count.should == 1
      result.first.provided_id.should == "ami1"

      get :index, finder:{provided_id:"ami"}
      result = assigns(:virtual_server_images)
      result.count.should == 0

      get :index, finder:{name:"test"}
      result = assigns(:virtual_server_images)
      result.count.should == 2
      result.each do |r|
        r.name.should =~ /test/
      end

      get :index, finder:{description:"desc"}
      result = assigns(:virtual_server_images)
      result.count.should == 2
      result.each do |r|
        r.description.should =~ /desc/
      end

      get :index, finder:{name:"test", description:"desc2"}
      result = assigns(:virtual_server_images)
      result.count.should == 1
      result.each do |r|
        r.name.should =~ /test/
        r.description.should =~ /desc2/
      end
    end

    it "ソートできること" do
      vi1 = Tengine::Resource::VirtualServerImage.create!(
        name:"aname",
        provided_id:"cmi0001",
        provided_description:"bdescription",
        description:"adescription"
      )
      vi2 = Tengine::Resource::VirtualServerImage.create!(
        name:"bname",
        provided_id:"ami0001",
        provided_description:"cdescription",
        description:"cdescription"
      )
      vi3 = Tengine::Resource::VirtualServerImage.create!(
        name:"cname",
        provided_id:"bmi0001",
        provided_description:"adescription",
        description:"bdescription"
      )

      get :index, sort:{ name:"asc" }
      assigns(:virtual_server_images).should == [vi1, vi2, vi3]

      get :index, sort:{ name:"desc" }
      assigns(:virtual_server_images).should == [vi3, vi2, vi1]

      get :index, sort:{ provided_id:"asc" }
      assigns(:virtual_server_images).should == [vi2, vi3, vi1]

      get :index, sort:{ provided_id:"desc" }
      assigns(:virtual_server_images).should == [vi1, vi3, vi2]

      get :index, sort:{ provided_description:"asc" }
      assigns(:virtual_server_images).should == [vi3, vi1, vi2]

      get :index, sort:{ provided_description:"desc" }
      assigns(:virtual_server_images).should == [vi2, vi1, vi3]

      get :index, sort:{ description:"asc" }
      assigns(:virtual_server_images).should == [vi1, vi3, vi2]

      get :index, sort:{ description:"desc" }
      assigns(:virtual_server_images).should == [vi2, vi3, vi1]

      get :index
      assigns(:virtual_server_images).should == [vi1, vi2, vi3]
      request.query_parameters[:sort].should == { name:"asc" }

      get :index, sort:{ test:"asc" }
      assigns(:virtual_server_images).should == [vi1, vi2, vi3]
      request.query_parameters[:sort].should == { name:"asc" }
    end
  end

  describe "GET show" do
    it "assigns the requested virtual_server_image as @virtual_server_image" do
      virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
      get :show, :id => virtual_server_image.id.to_s
      response.should redirect_to(:action => "index")
    end
  end

  # controlerのnewメソッドと同様にコメントしています。
  # describe "GET new" do
  #   it "assigns a new virtual_server_image as @virtual_server_image" do
  #     get :new
  #     response.should redirect_to(:action => "index")
  #   end
  # end

  describe "GET edit" do
    it "assigns the requested virtual_server_image as @virtual_server_image" do
      virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
      get :edit, :id => virtual_server_image.id.to_s
      assigns(:virtual_server_image).should eq(virtual_server_image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Resource::VirtualServerImage" do
        expect {
          post :create, :virtual_server_image => valid_attributes
        }.to change(Tengine::Resource::VirtualServerImage, :count).by(1)
      end

      it "assigns a newly created virtual_server_image as @virtual_server_image" do
        post :create, :virtual_server_image => valid_attributes
        assigns(:virtual_server_image).should be_a(Tengine::Resource::VirtualServerImage)
        assigns(:virtual_server_image).should be_persisted
      end

      it "redirects to the created virtual_server_image" do
        post :create, :virtual_server_image => valid_attributes
        response.should redirect_to(Tengine::Resource::VirtualServerImage.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved virtual_server_image as @virtual_server_image" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServerImage.any_instance.stub(:save).and_return(false)
        post :create, :virtual_server_image => {}
        assigns(:virtual_server_image).should be_a_new(Tengine::Resource::VirtualServerImage)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServerImage.any_instance.stub(:save).and_return(false)
        post :create, :virtual_server_image => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested virtual_server_image" do
        virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
        # Assuming there are no other tengine_resource_virtual_server_images in the database, this
        # specifies that the Tengine::Resource::VirtualServerImage created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Resource::VirtualServerImage.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => virtual_server_image.id, :virtual_server_image => {'these' => 'params'}
      end

      it "assigns the requested virtual_server_image as @virtual_server_image" do
        virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
        put :update, :id => virtual_server_image.id, :virtual_server_image => valid_attributes
        assigns(:virtual_server_image).should eq(virtual_server_image)
      end

      it "redirects to the virtual_server_image" do
        virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
        put :update, :id => virtual_server_image.id, :virtual_server_image => valid_attributes
        response.should redirect_to(tengine_resource_virtual_server_images_url)

        put :update, :id => virtual_server_image.id.to_s, :virtual_server_image => {},
          :commit => I18n.t("views.links.cancel")
        response.should redirect_to(tengine_resource_virtual_server_images_url)
      end
    end

    describe "with invalid params" do
      it "assigns the virtual_server_image as @virtual_server_image" do
        virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServerImage.any_instance.stub(:save).and_return(false)
        put :update, :id => virtual_server_image.id.to_s, :virtual_server_image => {}
        assigns(:virtual_server_image).should eq(virtual_server_image)
      end

      it "re-renders the 'edit' template" do
        virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Resource::VirtualServerImage.any_instance.stub(:save).and_return(false)
        put :update, :id => virtual_server_image.id.to_s, :virtual_server_image => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested virtual_server_image" do
      virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
      expect {
        delete :destroy, :id => virtual_server_image.id.to_s
      }.to change(Tengine::Resource::VirtualServerImage, :count).by(-1)
    end

    it "redirects to the tengine_resource_virtual_server_images list" do
      virtual_server_image = Tengine::Resource::VirtualServerImage.create! valid_attributes
      delete :destroy, :id => virtual_server_image.id.to_s
      response.should redirect_to(tengine_resource_virtual_server_images_url)
    end
  end

end
