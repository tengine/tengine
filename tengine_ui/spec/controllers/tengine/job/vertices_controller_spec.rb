require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Job::VerticesController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Job::Vertex. As you add validations to Tengine::Job::Vertex, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all tengine_job_vertices as @tengine_job_vertices" do
      Tengine::Job::Vertex.delete_all
      vertex = Tengine::Job::Vertex.create! valid_attributes
      get :index
      vertices = assigns(:vertices)
      vertices.to_a.should eq([vertex])
    end
  end

  describe "GET show" do
    it "assigns the requested vertex as @vertex" do
      vertex = Tengine::Job::Vertex.create! valid_attributes
      get :show, :id => vertex.id.to_s
      assigns(:vertex).should eq(vertex)
    end
  end

  describe "GET new" do
    it "assigns a new vertex as @vertex" do
      get :new
      assigns(:vertex).should be_a_new(Tengine::Job::Vertex)
    end
  end

  describe "GET edit" do
    it "assigns the requested vertex as @vertex" do
      vertex = Tengine::Job::Vertex.create! valid_attributes
      get :edit, :id => vertex.id.to_s
      assigns(:vertex).should eq(vertex)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Job::Vertex" do
        expect {
          post :create, :vertex => valid_attributes
        }.to change(Tengine::Job::Vertex, :count).by(1)
      end

      it "assigns a newly created vertex as @vertex" do
        post :create, :vertex => valid_attributes
        assigns(:vertex).should be_a(Tengine::Job::Vertex)
        assigns(:vertex).should be_persisted
      end

      it "redirects to the created vertex" do
        post :create, :vertex => valid_attributes
        response.should redirect_to(Tengine::Job::Vertex.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved vertex as @vertex" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Vertex.any_instance.stub(:save).and_return(false)
        post :create, :vertex => {}
        assigns(:vertex).should be_a_new(Tengine::Job::Vertex)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Vertex.any_instance.stub(:save).and_return(false)
        post :create, :vertex => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested vertex" do
        vertex = Tengine::Job::Vertex.create! valid_attributes
        # Assuming there are no other tengine_job_vertices in the database, this
        # specifies that the Tengine::Job::Vertex created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Job::Vertex.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => vertex.id, :vertex => {'these' => 'params'}
      end

      it "assigns the requested vertex as @vertex" do
        vertex = Tengine::Job::Vertex.create! valid_attributes
        put :update, :id => vertex.id, :vertex => valid_attributes
        assigns(:vertex).should eq(vertex)
      end

      it "redirects to the vertex" do
        vertex = Tengine::Job::Vertex.create! valid_attributes
        put :update, :id => vertex.id, :vertex => valid_attributes
        response.should redirect_to(vertex)
      end
    end

    describe "with invalid params" do
      it "assigns the vertex as @vertex" do
        vertex = Tengine::Job::Vertex.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Vertex.any_instance.stub(:save).and_return(false)
        put :update, :id => vertex.id.to_s, :vertex => {}
        assigns(:vertex).should eq(vertex)
      end

      it "re-renders the 'edit' template" do
        vertex = Tengine::Job::Vertex.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Vertex.any_instance.stub(:save).and_return(false)
        put :update, :id => vertex.id.to_s, :vertex => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested vertex" do
      vertex = Tengine::Job::Vertex.create! valid_attributes
      expect {
        delete :destroy, :id => vertex.id.to_s
      }.to change(Tengine::Job::Vertex, :count).by(-1)
    end

    it "redirects to the tengine_job_vertices list" do
      vertex = Tengine::Job::Vertex.create! valid_attributes
      delete :destroy, :id => vertex.id.to_s
      response.should redirect_to(tengine_job_vertices_url)
    end
  end

end
