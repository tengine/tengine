# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Job::ExecutionsController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Job::Execution. As you add validations to Tengine::Job::Execution, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all tengine_job_executions as @tengine_job_executions" do
      Tengine::Job::Execution.delete_all
      execution = Tengine::Job::Execution.create! valid_attributes
      get :index
      executions = assigns(:executions)
      executions.to_a.should eq([execution])
    end
  end

  describe "GET show" do
    it "assigns the requested execution as @execution" do
      execution = Tengine::Job::Execution.create! valid_attributes
      get :show, :id => execution.id.to_s
      assigns(:execution).should eq(execution)
    end
  end

  describe "GET new" do
    describe "ジョブネットの実行のとき" do
      before do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Core::Setting.create!(:name => "dsl_version", :value => "1234567890")
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        @test = Tengine::Job::RootJobnetTemplate.create!(
          :name => "Test Name",
          :description => "Test Description",
          :script => "Script",
          :category => category,
          :dsl_filepath => "Dsl Filepath",
          :dsl_version => "1234567890"
        )
        @default_params = {:root_jobnet_id => @test.id.to_s}
      end

      after do
        Tengine::Core::Setting.where(:name => "dsl_version").delete_all
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
      end

      it "assigns a new execution as @execution" do
        get :new, @default_params
        execution = assigns(:execution)
        execution.should be_a_new(Tengine::Job::Execution)
        execution.actual_base_timeout_alert.should == 0
        execution.actual_base_timeout_termination.should == 0
      end

      it "assigns false as @retry" do
        get :new, @default_params
        assigns(:retry).should be_false
      end

      it "root_jobnet_idパラメータで指定された@root_jobnetが設定されていること" do
        get :new, @default_params
        assigns(:root_jobnet).id.should == @test.id
      end

      it "root_jobnet_idパラメータがないときテンプレートジョブ一覧にリダイレクトすること" do
        get :new
        assert_redirected_to tengine_job_root_jobnet_templates_path
      end

      it "retryパラメータが'false'のとき、@retryにfalseが設定されていること" do
        get :new, @default_params.merge(:retry => false)
        assigns(:retry).should be_false
      end
    end

    describe "ジョブネットの再実行のとき" do
      before do
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        Tengine::Job::RootJobnetActual.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        @test = Tengine::Job::RootJobnetTemplate.create!(
          :name => "Test Name",
          :description => "Test Description",
          :script => "Script",
          :category => category,
          :dsl_filepath => "Dsl Filepath",
          :dsl_version => "1234567890"
        )
        @test_actual = @test.generate
        @test_actual.save!
        @default_params = {:root_jobnet_id => @test_actual.id.to_s, :retry => true}
      end

      after do
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        Tengine::Job::RootJobnetActual.delete_all
      end

      it "assigns a new execution as @execution" do
        get :new, @default_params
        execution = assigns(:execution)
        execution.should be_a_new(Tengine::Job::Execution)
        execution.actual_base_timeout_alert.should == 0
        execution.actual_base_timeout_termination.should == 0
      end

      it "assigns true as @retry" do
        get :new, @default_params
        assigns(:retry).should be_true
      end

      it "@select_root_jobnetが設定されていること" do
        get :new, @default_params
        assigns(:select_root_jobnet).should be_true
        get :new, @default_params.merge(:target_actual_ids => [@test_actual.id.to_s])
        assigns(:select_root_jobnet).should be_true
        get :new, @default_params.merge(:target_actual_ids => [123456])
        assigns(:select_root_jobnet).should be_false
      end

      it "@target_actual_idsが設定されていること" do
        get :new, @default_params
        assigns(:target_actual_ids).should == [@test_actual.id.to_s]
        get :new, @default_params.merge(:target_actual_ids => [@test_actual.id.to_s])
        assigns(:target_actual_ids).should == [@test_actual.id.to_s]
        get :new, @default_params.merge(:target_actual_ids => [123456])
        assigns(:target_actual_ids).should == ["123456"]
      end

      it "root_jobnet_idパラメータがないとき実行中のジョブ一覧にリダイレクトすること" do
        get :new, :retry => true
        assert_redirected_to tengine_job_root_jobnet_actuals_path
      end
    end
  end

  describe "GET edit" do
    it "assigns the requested execution as @execution" do
      execution = Tengine::Job::Execution.create! valid_attributes
      get :edit, :id => execution.id.to_s
      assigns(:execution).should eq(execution)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      before do
        Tengine::Job::Category.delete_all
        Tengine::Job::RootJobnetTemplate.delete_all
        category = stub_model(Tengine::Job::Category, :to_s => "category")
        @test = Tengine::Job::RootJobnetTemplate.create!(
          :name => "Test Name",
          :description => "Test Description",
          :script => "Script",
          :category => category,
          :dsl_filepath => "Dsl Filepath",
          :dsl_version => "1234567890"
        )
        @test_actual = @test.generate
        @test_actual.save!

        @valid_attributes = {
          :root_jobnet_id => @test.id.to_s,
          :actual_base_timeout_termination => "30",
          :actual_base_timeout_alert => "10",
        }
      end

      after do
        Tengine::Job::RootJobnetTemplate.delete_all
        Tengine::Job::RootJobnetActual.delete_all
      end

      describe "実行のとき" do
        before do
          EM.stub(:run).and_yield
          mock_sender = mock(:sender)
          Tengine::Event.stub(:default_sender).and_return(mock_sender)
          mock_sender.stub(:fire)
        end

        it "assigns a newly created execution as @execution" do
          post :create, :execution => @valid_attributes
          assigns(:execution).should be_a(Tengine::Job::Execution)
        end

        it "@execution.retryがfalseのとき@root_jobnetのclassがTengine::Job::RootJobnetTemplateであること" do
          post :create, :execution => @valid_attributes
          assigns(:root_jobnet).should be_a(Tengine::Job::RootJobnetTemplate)
        end

        it "redirects to the created execution" do
          post :create, :execution => @valid_attributes
          assigns(:execution)
          response.should be_redirect
        end
      end

      describe "再実行のとき" do
        before do
          EM.stub(:run).and_yield
          mock_sender = mock(:sender)
          Tengine::Event.stub(:default_sender).and_return(mock_sender)
          mock_sender.stub(:fire)

          executed = Tengine::Job::Execution.create!(:retry => true, :spot => false,
            :root_jobnet_id => @test_actual.id.to_s,
            :target_actual_ids => [@test_actual.id.to_s]
          ) 
          Tengine::Job::RootJobnetActual.any_instance.stub(:rerun).and_return(executed)
        end

        it "retryクエリーパラメータで指定した@retryが設定されていること" do
          post :create, :execution => @valid_attributes.merge(
            :retry => true, :root_jobnet_id => @test_actual.id.to_s)
          assigns(:execution).should be_a(Tengine::Job::Execution)
        end

        it "@execution.retryがtrueのとき@root_jobnetのclassがTengine::Job::RootJobnetActualであること" do
          post :create, :execution => @valid_attributes.merge(
            :retry => true, :root_jobnet_id => @test_actual.id.to_s)
          assigns(:root_jobnet).should be_a(Tengine::Job::RootJobnetActual)
        end
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested execution" do
        execution = Tengine::Job::Execution.create! valid_attributes
        # Assuming there are no other tengine_job_executions in the database, this
        # specifies that the Tengine::Job::Execution created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Job::Execution.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => execution.id, :execution => {'these' => 'params'}
      end

      it "assigns the requested execution as @execution" do
        execution = Tengine::Job::Execution.create! valid_attributes
        put :update, :id => execution.id, :execution => valid_attributes
        assigns(:execution).should eq(execution)
      end

      it "redirects to the execution" do
        execution = Tengine::Job::Execution.create! valid_attributes
        put :update, :id => execution.id, :execution => valid_attributes
        response.should redirect_to(execution)
      end
    end

    describe "with invalid params" do
      it "assigns the execution as @execution" do
        execution = Tengine::Job::Execution.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Execution.any_instance.stub(:save).and_return(false)
        put :update, :id => execution.id.to_s, :execution => {}
        assigns(:execution).should eq(execution)
      end

      it "re-renders the 'edit' template" do
        execution = Tengine::Job::Execution.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Execution.any_instance.stub(:save).and_return(false)
        put :update, :id => execution.id.to_s, :execution => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested execution" do
      execution = Tengine::Job::Execution.create! valid_attributes
      expect {
        delete :destroy, :id => execution.id.to_s
      }.to change(Tengine::Job::Execution, :count).by(-1)
    end

    it "redirects to the tengine_job_executions list" do
      execution = Tengine::Job::Execution.create! valid_attributes
      delete :destroy, :id => execution.id.to_s
      response.should redirect_to(tengine_job_executions_url)
    end
  end

end
