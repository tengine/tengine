# -*- coding: utf-8 -*-
require 'spec_helper'
require 'tmpdir'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Tengine::Job::Runtime::JobnetsController do

  # This should return the minimal set of attributes required to create a valid
  # Tengine::Job::Runtime::Jobnet. As you add validations to Tengine::Job::Runtime::Jobnet, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:name => "test1"}
  end

  def valid_attributes_for_root
    {:name => "root test1"}
  end

  def load_dsl(dir, filename)
    @bootstrap = Tengine::Core::Bootstrap.new({
      :action => "load",
      :tengined => { :load_path => File.expand_path(filename, dir), :cache_drivers => true },
    })
    @bootstrap.boot
  end

  describe "GET index" do
    before do
      Tengine.plugins.add(Tengine::Job)

      Tengine::Job::Category.delete_all
      Tengine::Job::Template::RootJobnet.delete_all
      Tengine::Job::Runtime::RootJobnet.delete_all
      dsl_dir = Dir.tmpdir
      File.open(File.expand_path("VERSION", dsl_dir), "w"){|f| f.write("1") }
      fname = "jn1_jobnet"
      File.open(File.expand_path(fname, dsl_dir), "w") do |f|
        f.write(<<-__end_of_dsl__)
# -*- coding: utf-8 -*-
require 'tengine_job'
# [jn1]
#               
# [S1]-->[j1]-->[E1]
#               
jobnet("jn1", :instance_name => "test_server1", :credential_name => "test_credential1") do
  boot_jobs("j1")
  job("j1", "echo 'j1'")
  finally do
    job("jn1_f", "echo 'jn1_f'")
  end
end
__end_of_dsl__
      end
      load_dsl(dsl_dir, fname)
      root_jobnet_template = Tengine::Job::Template::RootJobnet.first()
      @root_jobnet_actual = root_jobnet_template.generate
      @root_jobnet_actual.save!
      @jobnet_actuals = []
      visitor = Tengine::Job::Vertex::AllVisitor.new do |vertex|
                  if vertex.instance_of?(Tengine::Job::Runtime::Jobnet)
                    @jobnet_actuals << vertex
                  end
                end
      @root_jobnet_actual.accept_visitor(visitor)
    end

    after do
      Tengine::Job::Category.delete_all
      Tengine::Job::Template::RootJobnet.delete_all
      Tengine::Job::Runtime::RootJobnet.delete_all
    end

    it "assigns all tengine_job_jobnet_actuals as @tengine_job_jobnet_actuals" do
      get :index, :root_jobnet_actual_id => @root_jobnet_actual.id.to_s
      jobnet_actuals = assigns(:jobnet_actuals)
      jobnet_actuals.to_a.should eq(@jobnet_actuals)
    end
  end

  describe "GET show" do
    it "assigns the requested jobnet_actual as @jobnet_actual" do
      root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.new(valid_attributes_for_root)
      jobnet_actual = Tengine::Job::Runtime::Jobnet.new(valid_attributes)
      root_jobnet_actual.children << jobnet_actual
      root_jobnet_actual.save!
      get :show, :id => jobnet_actual.id.to_s, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
      assigns(:jobnet_actual).should eq(jobnet_actual)
    end
  end

  describe "GET new" do
    it "assigns a new jobnet_actual as @jobnet_actual" do
      root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
      get :new, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
      assigns(:jobnet_actual).should be_a_new(Tengine::Job::Runtime::Jobnet)
    end
  end

  describe "GET edit" do
    it "assigns the requested jobnet_actual as @jobnet_actual" do
      root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.new(valid_attributes_for_root)
      jobnet_actual = Tengine::Job::Runtime::Jobnet.new(valid_attributes)
      root_jobnet_actual.children << jobnet_actual
      root_jobnet_actual.save!

      get :edit, :id => jobnet_actual.id.to_s,
        :root_jobnet_actual_id => root_jobnet_actual.id.to_s

      assigns(:jobnet_actual).should eq(jobnet_actual)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tengine::Job::Runtime::Jobnet" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        expect {
          post :create, :jobnet_actual => valid_attributes, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        }.to change(Tengine::Job::Runtime::Jobnet, :count).by(1)
      end

      it "assigns a newly created jobnet_actual as @jobnet_actual" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        post :create, :jobnet_actual => valid_attributes, :root_jobnet_actual_id => root_jobnet_actual
        assigns(:jobnet_actual).should be_a(Tengine::Job::Runtime::Jobnet)
        assigns(:jobnet_actual).should be_persisted
      end

      it "redirects to the created jobnet_actual" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        post :create, :jobnet_actual => valid_attributes, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        jobnet_actual = Tengine::Job::Runtime::Jobnet.last
        response.should redirect_to(tengine_job_root_jobnet_actual_jobnet_actual_path(jobnet_actual, :root_jobnet_actual_id => root_jobnet_actual.id.to_s))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved jobnet_actual as @jobnet_actual" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(false)
        post :create, :jobnet_actual => {}, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        assigns(:jobnet_actual).should be_a_new(Tengine::Job::Runtime::Jobnet)
      end

      it "re-renders the 'new' template" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(false)
        post :create, :jobnet_actual => {}, :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested jobnet_actual" do
        root_jobnet_actual = Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
        # Assuming there are no other tengine_job_jobnet_actuals in the database, this
        # specifies that the Tengine::Job::Runtime::Jobnet created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tengine::Job::Runtime::Jobnet.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
          and_return(jobnet_actual)
        put :update, :id => jobnet_actual.id, :jobnet_actual => {'these' => 'params'},
          :root_jobnet_actual_id => root_jobnet_actual.id.to_s
      end

      it "assigns the requested jobnet_actual as @jobnet_actual" do
        root_jobnet_actual = \
          Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(true)
        Tengine::Job::Runtime::RootJobnet.any_instance.should_receive(:find_descendant).
          with(jobnet_actual.id.to_s).and_return(jobnet_actual)
        put :update, :id => jobnet_actual.id, :jobnet_actual => valid_attributes,
          :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        assigns(:jobnet_actual).should eq(jobnet_actual)
      end

      it "redirects to the root_jobnet_actual show" do
        root_jobnet_actual = \
          Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(true)
        Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
          and_return(jobnet_actual)
        put :update, :id => jobnet_actual.id, :jobnet_actual => valid_attributes,
          :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        response.should redirect_to(
          tengine_job_root_jobnet_actual_path(root_jobnet_actual))
      end
    end

    describe "with invalid params" do
      it "assigns the jobnet_actual as @jobnet_actual" do
        root_jobnet_actual = \
          Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(false)
        Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
          and_return(jobnet_actual)

        put :update, :id => jobnet_actual.id.to_s, :jobnet_actual => {},
          :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        assigns(:jobnet_actual).should eq(jobnet_actual)
      end

      it "re-renders the 'edit' template" do
        root_jobnet_actual = \
          Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
        jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Tengine::Job::Runtime::Jobnet.any_instance.stub(:save).and_return(false)
        Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
          and_return(jobnet_actual)

        put :update, :id => jobnet_actual.id.to_s, :jobnet_actual => {},
          :root_jobnet_actual_id => root_jobnet_actual.id.to_s
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested jobnet_actual" do
      root_jobnet_actual = \
        Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
      jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      job_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      jobnet_actual.stub(:children).and_return([job_actual])
      Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
        and_return(jobnet_actual)
      Tengine::Job::Runtime::Jobnet.any_instance.should_receive(:fire_stop_event)
      delete :destroy, :id => jobnet_actual.id.to_s,
        :root_jobnet_actual_id => root_jobnet_actual.id.to_s
    end

    it "destroys the requested actual job. example: job, hadoop_job_run (script_executable? => true)" do
      root_jobnet_actual = \
        Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
      jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      job_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      # job_actual.stub(:children).and_return(nil)
      job_actual.stub(:script_executable?).and_return(true)
      job_actual.stub(:parent).and_return(jobnet_actual)
      Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
        and_return(job_actual)
      Tengine::Job::Runtime::Jobnet.any_instance.should_receive(:fire_stop_event)
      delete :destroy, :id => job_actual.id.to_s,
        :root_jobnet_actual_id => root_jobnet_actual.id.to_s
    end

    it "redirects to the tengine_job_jobnet_actuals list. example: jobnet (script_executable? => false)" do
      root_jobnet_actual = \
        Tengine::Job::Runtime::RootJobnet.create! valid_attributes_for_root
      jobnet_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      job_actual = Tengine::Job::Runtime::Jobnet.create! valid_attributes
      # jobnet_actual.stub(:children).and_return([job_actual])
      jobnet_actual.stub(:script_executable?).and_return(false)
      Tengine::Job::Runtime::RootJobnet.any_instance.stub(:find_descendant).
        and_return(jobnet_actual)
      Tengine::Job::Runtime::Jobnet.any_instance.should_receive(:fire_stop_event)
      delete :destroy, :id => jobnet_actual.id.to_s,
        :root_jobnet_actual_id => root_jobnet_actual.id.to_s
      response.should redirect_to(tengine_job_root_jobnet_actual_path(root_jobnet_actual))
    end
  end

end
